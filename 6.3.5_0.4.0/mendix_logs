#!/usr/bin/qjs --module
//--------------------------------------------------------------------------------
import*as std from"std";
import*as os from"os";
//--------------------------------------------------------------------------------
async function main(){
	try{
		let runtime_env=await getenv();
		let m2ee_host="localhost";
		let m2ee_port=runtime_env.M2EE_ADMIN_PORT;
		let m2ee_pass=runtime_env.M2EE_ADMIN_PASS;
		let m2ee_url=`http://${m2ee_host}:${m2ee_port}`;
		let logging_port=scriptArgs.length>=2?parseInt(scriptArgs[1]):5000;
		if(isNaN(logging_port))throw("Invalid port specification");
		let logging_host=scriptArgs.length>=3?scriptArgs[2]:"127.0.0.1";
		let logging_level=scriptArgs.length>=4?scriptArgs[3]:"INFO";
		console.log(`${COLORS.FgCyan}host: ${logging_host}${COLORS.Reset}`);
		console.log(`${COLORS.FgCyan}port: ${logging_port}${COLORS.Reset}`);
		console.log(`${COLORS.FgCyan}level: ${logging_level}${COLORS.Reset}`);
			//start up netcat
		let err={};
		let f=std.popen(`nc -l -p ${logging_port}`,'r',err);
			//then call m2ee
		let m2ee_res=JSON.parse(await m2ee(m2ee_url,m2ee_pass,{
			"action":"create_log_subscriber",
			"params":{
				"type":"tcpjsonlines",
				"name":`qjs_loger_${logging_port}`,
				"autosubscribe":logging_level,//"INFO",
				"host":logging_host,
				"port":logging_port
			}
		}));
		console.log(`${m2ee_res.result==0?COLORS.FgGreen:COLORS.FgRed}${JSON.stringify(m2ee_res)}${COLORS.Reset}`);
		while(!f.eof()){
			var line=f.getline();
			try{if(line!=null){
				var o=JSON.parse(line);
				let timestamp=new Date(o.timestamp);
				let node=o.node;
				let level=o.level;
				let message=o.message;
				message=message.replace(/^\s+|\s+$/g, '');
				let LINE_COLOR="";
				switch(level){
					case"INFO":LINE_COLOR=COLORS.FgBlue;break;
					case"ERROR":LINE_COLOR=COLORS.FgRed;break;
					case"WARNING":LINE_COLOR=COLORS.FgYellow;break;
					case"DEBUG":LINE_COLOR=COLORS.FgCyan;break;
					default:LINE_COLOR=COLORS.FgWhite;break;
				}
				let MESSAGE_COLOR=LINE_COLOR;
				try{
					//JSON.parse(message);
					//MESSAGE_COLOR=COLORS.FgGreen;
					let _=extractJSON(message);
					if(_!=null){
						message=message.substring(0,_[1])+
							COLORS.Bright+
						        JSON.stringify(_[0])+
							COLORS.Reset+
							MESSAGE_COLOR+
						        message.substring(_[2])
						;
					}
					/*
					{
						let _=[];
						message.split('"').forEach((s,i)=>{
							if(i%2==1){
								_.push(COLORS.Underscore+s+COLORS.NoUnderscore);
							}else{
								_.push(s);
							}
						});
						message=_.join('"');
						message+=COLORS.NoUnderscore;
					}
					*/
					//[object Object],53,96
				}catch(e){
				}
				console.log(`${COLORS.FgCyan}${timestamp}:\t${COLORS.FgWhite}${node}${COLORS.Reset}${LINE_COLOR}\t${level}\t${MESSAGE_COLOR}${message}`);
			}}catch(e){}
		}
		f.close();
	}catch(e){
		console.log(`${COLORS.FgRed}${e.toString()}${COLORS.Reset}`);
		std.exit(1);
	}
}
//https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences
let COLORS={
	Reset:"\x1b[0m",
	Bright:"\x1b[1m",
	Dim:"\x1b[2m",
	Underscore:"\x1b[4m",
	NoUnderscore:"\x1b[24m",
	Blink:"\x1b[5m",
	Reverse:"\x1b[7m",
	Hidden:"\x1b[8m",
	FgBlack:"\x1b[30m",
	FgRed:"\x1b[31m",
	FgGreen:"\x1b[32m",
	FgYellow:"\x1b[33m",
	FgBlue:"\x1b[34m",
	FgMagenta:"\x1b[35m",
	FgCyan:"\x1b[36m",
	FgWhite:"\x1b[37m",
	BgBlack:"\x1b[40m",
	BgRed:"\x1b[41m",
	BgGreen:"\x1b[42m",
	BgYellow:"\x1b[43m",
	BgBlue:"\x1b[44m",
	BgMagenta:"\x1b[45m",
	BgCyan:"\x1b[46m",
	BgWhite:"\x1b[47m"
};
//--------------------------------------------------------------------------------
//
function extractJSON(str) {
    var firstOpen, firstClose, candidate;
    firstOpen = str.indexOf('{', firstOpen + 1);
    do {
        firstClose = str.lastIndexOf('}');
        //console.log('firstOpen: ' + firstOpen, 'firstClose: ' + firstClose);
        if(firstClose <= firstOpen) {
            return null;
        }
        do {
            candidate = str.substring(firstOpen, firstClose + 1);
            //console.log('candidate: ' + candidate);
            try {
                var res = JSON.parse(candidate);
                //console.log('...found');
                return [res, firstOpen, firstClose + 1];
            }
            catch(e) {
                //console.log('...failed');
            }
            firstClose = str.substr(0, firstClose).lastIndexOf('}');
        } while(firstClose > firstOpen);
        firstOpen = str.indexOf('{', firstOpen + 1);
    } while(firstOpen != -1);
}


async function m2ee(url,pass,data){
	return(await fetch(
		url,
		{
			headers:{
				"Content-Type":"application/json",
				"X-M2EE-Authentication":btoa(pass)
			},
			method:"POST",
			body:JSON.stringify(data)
		}
	)).text();
}
function writeFile(fnam,data){
	let f=std.open(fnam,"w");
	f.puts(data);
	f.close();
}
async function make_getenv(){
	let s='#include <string>\r\n#include <vector>\r\n#include <cwchar>\r\n\r\n#include <windows.h>\r\n#include <winternl.h>\r\n\r\nusing std::string;\r\nusing std::wstring;\r\nusing std::vector;\r\nusing std::size_t;\r\n\r\n\/\/ define process_t type\r\ntypedef DWORD process_t;\r\n\r\n\/\/ #define instead of typedef to override\r\n#define RTL_DRIVE_LETTER_CURDIR struct {\\\r\n  WORD Flags;\\\r\n  WORD Length;\\\r\n  ULONG TimeStamp;\\\r\n  STRING DosPath;\\\r\n}\\\r\n\r\n\/\/ #define instead of typedef to override\r\n#define RTL_USER_PROCESS_PARAMETERS struct {\\\r\n  ULONG MaximumLength;\\\r\n  ULONG Length;\\\r\n  ULONG Flags;\\\r\n  ULONG DebugFlags;\\\r\n  PVOID ConsoleHandle;\\\r\n  ULONG ConsoleFlags;\\\r\n  PVOID StdInputHandle;\\\r\n  PVOID StdOutputHandle;\\\r\n  PVOID StdErrorHandle;\\\r\n  UNICODE_STRING CurrentDirectoryPath;\\\r\n  PVOID CurrentDirectoryHandle;\\\r\n  UNICODE_STRING DllPath;\\\r\n  UNICODE_STRING ImagePathName;\\\r\n  UNICODE_STRING CommandLine;\\\r\n  PVOID Environment;\\\r\n  ULONG StartingPositionLeft;\\\r\n  ULONG StartingPositionTop;\\\r\n  ULONG Width;\\\r\n  ULONG Height;\\\r\n  ULONG CharWidth;\\\r\n  ULONG CharHeight;\\\r\n  ULONG ConsoleTextAttributes;\\\r\n  ULONG WindowFlags;\\\r\n  ULONG ShowWindowFlags;\\\r\n  UNICODE_STRING WindowTitle;\\\r\n  UNICODE_STRING DesktopName;\\\r\n  UNICODE_STRING ShellInfo;\\\r\n  UNICODE_STRING RuntimeData;\\\r\n  RTL_DRIVE_LETTER_CURDIR DLCurrentDirectory[32];\\\r\n  ULONG EnvironmentSize;\\\r\n}\\\r\n\r\n\/\/ shortens a wide string to a narrow string\r\nstatic inline string shorten(wstring wstr) {\r\n  int nbytes = WideCharToMultiByte(CP_UTF8, 0, wstr.c_str(), (int)wstr.length(), NULL, 0, NULL, NULL);\r\n  vector<char> buf(nbytes);\r\n  return string { buf.data(), (size_t)WideCharToMultiByte(CP_UTF8, 0, wstr.c_str(), (int)wstr.length(), buf.data(), nbytes, NULL, NULL) };\r\n}\r\n\r\n\/\/ replace all occurrences of substring found in string with specified new string\r\nstatic inline string string_replace_all(string str, string substr, string nstr) {\r\n  size_t pos = 0;\r\n  while ((pos = str.find(substr, pos)) != string::npos) {\r\n    str.replace(pos, substr.length(), nstr);\r\n    pos += nstr.length();\r\n  }\r\n  return str;\r\n}\r\n\r\n\/\/ func that splits string by first occurrence of equals sign\r\nvector<string> string_split_by_first_equalssign(string str) {\r\n  size_t pos = 0;\r\n  vector<string> vec;\r\n  if ((pos = str.find_first_of(\"=\")) != string::npos) {\r\n    vec.push_back(str.substr(0, pos));\r\n    vec.push_back(str.substr(pos + 1));\r\n  }\r\n  return vec;\r\n}\r\n\r\n\/\/ checks whether process handle is 32-bit or not\r\nstatic inline bool IsX86Process(HANDLE process) {\r\n  BOOL isWow = true;\r\n  SYSTEM_INFO systemInfo = { 0 };\r\n  GetNativeSystemInfo(&systemInfo);\r\n  if (systemInfo.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_INTEL)\r\n    return isWow;\r\n  IsWow64Process(process, &isWow);\r\n  return isWow;\r\n}\r\n\r\n\/\/ helper to open processes based on pid with full debug privileges\r\nstatic inline HANDLE OpenProcessWithDebugPrivilege(process_t pid) {\r\n  HANDLE hToken;\r\n  LUID luid;\r\n  TOKEN_PRIVILEGES tkp;\r\n  OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken);\r\n  LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luid);\r\n  tkp.PrivilegeCount = 1;\r\n  tkp.Privileges[0].Luid = luid;\r\n  tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\r\n  AdjustTokenPrivileges(hToken, false, &tkp, sizeof(tkp), NULL, NULL);\r\n  CloseHandle(hToken);\r\n  return OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, pid);\r\n}\r\n\r\n\/\/ get wide character string of pids environ based on handle\r\nstatic inline wchar_t *GetEnvironmentStringsW(HANDLE proc) {\r\n  PEB peb;\r\n  SIZE_T nRead;\r\n  ULONG res_len = 0;\r\n  PROCESS_BASIC_INFORMATION pbi;\r\n  RTL_USER_PROCESS_PARAMETERS upp;\r\n  HMODULE p_ntdll = GetModuleHandleW(L\"ntdll.dll\");\r\n  typedef NTSTATUS (__stdcall *tfn_qip)(HANDLE, PROCESSINFOCLASS, PVOID, ULONG, PULONG);\r\n  tfn_qip pfn_qip = tfn_qip(GetProcAddress(p_ntdll, \"NtQueryInformationProcess\"));\r\n  NTSTATUS status = pfn_qip(proc, ProcessBasicInformation, &pbi, sizeof(pbi), &res_len);\r\n  if (status) { return NULL; } \r\n  ReadProcessMemory(proc, pbi.PebBaseAddress, &peb, sizeof(peb), &nRead);\r\n  if (!nRead) { return NULL; }\r\n  ReadProcessMemory(proc, peb.ProcessParameters, &upp, sizeof(upp), &nRead);\r\n  if (!nRead) { return NULL; }\r\n  PVOID buffer = upp.Environment;\r\n  ULONG length = upp.EnvironmentSize;\r\n  wchar_t *res = new wchar_t[length \/ 2 + 1];\r\n  ReadProcessMemory(proc, buffer, res, length, &nRead);\r\n  if (!nRead) { return NULL; }\r\n  res[length \/ 2] = 0;\r\n  return res;\r\n}\r\n\r\n\/\/ get env of pid as a narrow string\r\nstring env_from_pid(process_t pid) {\r\n  string envs;\r\n  HANDLE proc = OpenProcessWithDebugPrivilege(pid);\r\n  wchar_t *wenvs = NULL;\r\n  if (IsX86Process(GetCurrentProcess())) {\r\n    if (IsX86Process(proc)) {\r\n      wenvs = GetEnvironmentStringsW(proc);\r\n    }\r\n  } else {\r\n    if (!IsX86Process(proc)) {\r\n      wenvs = GetEnvironmentStringsW(proc);\r\n    }\r\n  }\r\n  string arg;\r\n  if (wenvs == NULL) { \r\n    return \"\"; \r\n  } else {\r\n    arg = shorten(wenvs);\r\n  }\r\n  size_t i = 0;\r\n  do {\r\n    size_t j = 0;\r\n    vector<string> envVec = string_split_by_first_equalssign(arg);\r\n    for (const string &env : envVec) {\r\n      if (j == 0) { \r\n        if (env.find_first_of(\"%<>^&|:\") != string::npos) { continue; }\r\n        if (env.empty()) { continue; }\r\n        envs += env; \r\n      } else { envs += \"=\\\"\" + string_replace_all(env, \"\\\"\", \"\\\\\\\"\") + \"\\\"\\n\"; }\r\n      j++;\r\n    }\r\n    i += wcslen(wenvs + i) + 1;\r\n    arg = shorten(wenvs + i);\r\n  } while (wenvs[i] != L\'\\0\');\r\n  if (envs.back() == \'\\n\') { envs.pop_back(); }\r\n  if (wenvs != NULL) { delete[] wenvs; } \r\n  CloseHandle(proc);\r\n  return envs;\r\n}\r\n\r\n\/\/ test function (can be omitted)\r\nint main(int argc, char **argv) {\r\n  if (argc == 2) {\r\n    printf(\"%s\", env_from_pid(stoul(string(argv[1]), nullptr, 10)).c_str());\r\n    printf(\"%s\", \"\\r\\n\");\r\n  } else {\r\n    printf(\"%s\", env_from_pid(GetCurrentProcessId()).c_str());\r\n    printf(\"%s\", \"\\r\\n\");\r\n  }\r\n  return 0;\r\n}\r\n';
	let CXX=`x86_64-w64-mingw32-g++`
	let CFLAGS=`-Wall -v`;
	let LDFLAGS=`-static`;
	let SRC=`./a.cpp`
	let BIN=`./getenv.exe`
	writeFile(SRC,s);
	let output=await run(`${CXX} ${CFLAGS} ${SRC} ${LDFLAGS} -o ${BIN} 2>&1`);
	console.log(`${COLORS.FgYellow}${output}${COLORS.Reset}`);
	os.remove(SRC);
}
async function getenv(){
	await make_getenv();
	let PID=(await run(`/mnt/c/Windows/System32/cmd.exe /c "tasklist /NH /FI "IMAGENAME eq javaw.exe"  /FO CSV"`)).split(",")[1];
	let ENV={};
	(await run(`./getenv.exe ${PID}`)).split("\n").forEach((l)=>{
		let kv=l.split("=");
		if(kv[1]!=null&&kv[1].length>0){
			ENV[kv[0]]=kv[1].substring(1,kv[1].length-2);
		}
	});
	os.remove("./getenv.exe");
	return ENV;
}
let b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
let b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
function btoa(string) {
        string = String(string);
        var bitmap, a, b, c,
            result = "", i = 0,
            rest = string.length % 3; // To determine the final padding

        for (; i < string.length;) {
            if ((a = string.charCodeAt(i++)) > 255
                    || (b = string.charCodeAt(i++)) > 255
                    || (c = string.charCodeAt(i++)) > 255)
                throw new TypeError("Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.");

            bitmap = (a << 16) | (b << 8) | c;
            result += b64.charAt(bitmap >> 18 & 63) + b64.charAt(bitmap >> 12 & 63)
                    + b64.charAt(bitmap >> 6 & 63) + b64.charAt(bitmap & 63);
        }

        // If there's need of padding, replace the last 'A's with equal signs
        return rest ? result.slice(0, rest - 3) + "===".substring(rest) : result;
};
function atob (string) {
        // atob can work with strings with whitespaces, even inside the encoded part,
        // but only \t, \n, \f, \r and ' ', which can be stripped.
        string = String(string).replace(/[\t\n\f\r ]+/g, "");
        if (!b64re.test(string))
            throw new TypeError("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");

        // Adding the padding if missing, for semplicity
        string += "==".slice(2 - (string.length & 3));
        var bitmap, result = "", r1, r2, i = 0;
        for (; i < string.length;) {
            bitmap = b64.indexOf(string.charAt(i++)) << 18 | b64.indexOf(string.charAt(i++)) << 12
                    | (r1 = b64.indexOf(string.charAt(i++))) << 6 | (r2 = b64.indexOf(string.charAt(i++)));

            result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255)
                    : r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255)
                    : String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);
        }
        return result;
};
function fetch(resource,init){
	if(resource.startsWith("file://")){//skullquake
		const p0=new Promise((resolve,reject)=>{
			let ecod=0;
			let fnam=resource;
			fnam=fnam.substring("file://".length)
			fnam=fnam.split("?")[0];//truncate query params
			let f=std.open(fnam,"r");
			f.seek(0,std.SEEK_END);
			let bufsz=f.tell();
			let s="";
			f.seek(0,std.SEEK_SET);
			if(f==null){
				console.log(`Failed to open ${fnam}`);
				reject(`Failed to open file`);
			}
			try{
				s=f.readAsString(bufsz);
				if(s==null){
					console.log(`Failed to get file contents`);
					ecod=1;
					reject(`Failed to get file contents`);
				}else{
					const response={
						headers:{},//responseHeaders,
						ok:true,
						url:resource,
						type:'json',
						text:()=>s,
						json:()=>JSON.parse(s),
					};
					resolve(response);
				}
			}catch(e){
				reject(e)
				console.log(`Error: ${e.toString()}`);
				ecod=1;
			}
			f.close();
		});
		return p0;
	}
	init=init||{
		method:'GET',
		headers:null,
		body:null,
	};
	//method is always in upper case
	init.method=init.method.toUpperCase();
	//curl command
	let curlCmd=`curl -s -X${init.method.toUpperCase()} "${resource}"`;
	if(init.headers!=null&& Object.keys(init.headers).length>0) {
		curlCmd=`${curlCmd} ${Object.entries(init.headers).map(n => `-H '${n[0]}: ${n[1]}'`).join(' ')}`
	}
	if(init.method!='GET'){
		let body=init.body;
		if(typeof body!='string'){
			body=JSON.stringify(body);
		}
		curlCmd=`${curlCmd} -d '${body}'`
	}
	//exec curl command in subprocess
	const spErr={};
	const sp=std.popen(curlCmd,'r',spErr);
	const curlOutput=sp.readAsString();
	const responseUrl=resource;
	const responseHeaders={};	// FIXME: to be implemented
	let responseOk=true;		// FIXME: to be implemented
	let responseStatus=200;		// FIXME: to be implemented
	const p=new Promise((resolve,reject)=>{
		const response={
			headers:responseHeaders,
			ok:responseOk,
			url:responseUrl,
			type:'json',
			text:()=>curlOutput,
			json:()=>JSON.parse(curlOutput),
		};
		resolve(response);
	});
	return p;
}
async function run(cmd){
	try{
		let err={};
		const sp=std.popen(cmd,'r',err);
		if(sp==null){
			throw("Failed to open process");
		}else{
			let s=await sp.readAsString();
			sp.close();
			return s;
		}
	}catch(e){
		throw(e.toString());
	}
}
main();
