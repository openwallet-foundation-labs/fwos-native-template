/**
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 * @format
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateImplReturnType = exports.translateSpecReturnType = void 0;
const ObjectTypes_1 = require("./ObjectTypes");
function translateReturnType(type, aliases, baseAliasName) {
    switch (type.type) {
        case 'VoidTypeAnnotation':
        case 'PromiseTypeAnnotation':
            return 'void';
        case 'NullableTypeAnnotation':
            return `std::optional<${translateReturnType(type.typeAnnotation, aliases, baseAliasName)}>`;
        default:
            return (0, ObjectTypes_1.translateFieldOrReturnType)(type, aliases, baseAliasName, 'translateReturnType');
    }
}
function translateSpecReturnType(type, aliases, baseAliasName) {
    return translateReturnType(type, aliases, `${baseAliasName}_returnType`);
}
exports.translateSpecReturnType = translateSpecReturnType;
function translateImplReturnType(type, aliases, baseAliasName) {
    return translateReturnType(type, aliases, `${baseAliasName}_returnType`);
}
exports.translateImplReturnType = translateImplReturnType;
//# sourceMappingURL=ReturnTypes.js.map