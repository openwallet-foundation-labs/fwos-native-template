"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file_upload_error_1 = require("./core/file-upload-error");
var upload_controller_factory_1 = require("./core/upload-controller-factory");
var types_1 = require("./types");
var isNode = require("detect-node");
var FileUploadClient = /** @class */ (function () {
    function FileUploadClient() {
    }
    Object.defineProperty(FileUploadClient.prototype, "AssetID", {
        get: function () {
            return this.settings.assetId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadClient.prototype, "AssetDomain", {
        get: function () {
            return this.settings.assetDomain;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadClient.prototype, "AssetToken", {
        get: function () {
            return this.settings.assetToken;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadClient.prototype, "File", {
        get: function () {
            return this.settings.file;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadClient.prototype, "UseLogging", {
        get: function () {
            return this.settings.useLogging === true;
        },
        enumerable: true,
        configurable: true
    });
    FileUploadClient.prototype.upload = function (settings) {
        var _this = this;
        if (this.isUploadInProgress()) {
            return null;
        }
        this.settings = settings;
        if (!this.initialized()) {
            return Promise.reject(file_upload_error_1.fileUploadError("File upload client is not initialized correctly"));
        }
        if (this.File && !this.fileIsValid(this.File)) {
            return Promise.reject(file_upload_error_1.fileUploadError("Uploaded file is not valid"));
        }
        var uploadPromise = new Promise(function (resolve, reject) {
            _this.uploadResolve = resolve;
            _this.uploadReject = reject;
        });
        var uploadSettings = {
            assetId: this.AssetID,
            token: this.AssetToken,
            uploadDomain: this.AssetDomain,
            logToConsole: this.UseLogging,
            onProgressChanged: this.onUploadProgress.bind(this),
            onMessage: this.onMessage.bind(this),
            onCompleted: this.onUploadComplete.bind(this),
            onStateChanged: this.onStateChanged.bind(this)
        };
        if (!this.fileUploadClient) {
            this.fileUploadClient = upload_controller_factory_1.default(uploadSettings);
        }
        else {
            this.fileUploadClient.init(uploadSettings);
        }
        this.fileUploadClient.start(this.File);
        return uploadPromise;
    };
    FileUploadClient.prototype.isUploadInProgress = function () {
        return this.fileUploadClient && this.fileUploadClient.isUploadInProgress();
    };
    FileUploadClient.prototype.cancel = function () {
        if (this.fileUploadClient) {
            this.fileUploadClient.cancel();
        }
    };
    FileUploadClient.prototype.getClientSettings = function () {
        return ({
            assetId: this.AssetID,
            assetDomain: this.AssetDomain,
            assetToken: this.AssetToken,
            useLogging: this.UseLogging,
            onProgressChanged: typeof this.settings.onProgressChanged === 'function' ? this.settings.onProgressChanged : Function(),
            onMessage: typeof this.settings.onMessage === 'function' ? this.settings.onMessage : Function(),
            onStateChanged: typeof this.settings.onStateChanged === 'function' ? this.settings.onStateChanged : Function()
        });
    };
    FileUploadClient.prototype.fileIsValid = function (file) {
        try {
            if (isNode) {
                var fs = require("fs");
                if ((typeof file === "string" && fs.statSync(file).size > 0) || file.size) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return file instanceof File && file.size > 0;
            }
        }
        catch (e) {
            if (this.UseLogging) {
                console.log(e);
            }
            return false;
        }
    };
    FileUploadClient.prototype.initialized = function () {
        if (!this.settings || !this.AssetID || !this.AssetDomain || !this.AssetToken || (!this.File)) {
            return false;
        }
        return true;
    };
    FileUploadClient.prototype.onUploadProgress = function (progress) {
        this.getClientSettings().onProgressChanged(progress);
    };
    FileUploadClient.prototype.onMessage = function (uploadMessage, messageLevel) {
        if (messageLevel !== types_1.MessageLevel.Error || !this.uploadReject) {
            this.getClientSettings().onMessage(uploadMessage, messageLevel);
        }
        else {
            this.uploadReject(file_upload_error_1.fileUploadError(uploadMessage));
        }
    };
    FileUploadClient.prototype.onUploadComplete = function (uploadStats) {
        this.uploadResolve(uploadStats);
    };
    FileUploadClient.prototype.onStateChanged = function (status) {
        this.getClientSettings().onStateChanged(status);
    };
    return FileUploadClient;
}());
exports.default = FileUploadClient;
var types_2 = require("./types");
exports.FileUploadServiceState = types_2.FileUploadServiceState;
exports.MessageLevel = types_2.MessageLevel;
//# sourceMappingURL=index.js.map