"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadBaseUrls = {
    CancelUpload: '/upload/cancel/',
    SetMetadata: '/upload/set_metadata/',
    UploadChunk: '/upload/upload_chunk/',
    UploadFinished: '/upload/finished/',
    UploadStatus: '/upload/status/'
};
var FileUploadServiceState;
(function (FileUploadServiceState) {
    FileUploadServiceState[FileUploadServiceState["New"] = 0] = "New";
    FileUploadServiceState[FileUploadServiceState["Initialized"] = 10] = "Initialized";
    FileUploadServiceState[FileUploadServiceState["Uploading"] = 20] = "Uploading";
    FileUploadServiceState[FileUploadServiceState["ResumeOrRestart"] = 40] = "ResumeOrRestart";
    FileUploadServiceState[FileUploadServiceState["Paused"] = 50] = "Paused";
    FileUploadServiceState[FileUploadServiceState["Unsupported"] = 60] = "Unsupported";
    FileUploadServiceState[FileUploadServiceState["Cancelled"] = 80] = "Cancelled";
    FileUploadServiceState[FileUploadServiceState["Verifying"] = 90] = "Verifying";
    FileUploadServiceState[FileUploadServiceState["Completed"] = 100] = "Completed";
    FileUploadServiceState[FileUploadServiceState["FatalError"] = 500] = "FatalError";
})(FileUploadServiceState = exports.FileUploadServiceState || (exports.FileUploadServiceState = {}));
var MessageLevel;
(function (MessageLevel) {
    MessageLevel[MessageLevel["Information"] = 0] = "Information";
    MessageLevel[MessageLevel["Verbose"] = 1] = "Verbose";
    MessageLevel[MessageLevel["Error"] = 2] = "Error";
})(MessageLevel = exports.MessageLevel || (exports.MessageLevel = {}));
var InflightModelChunk = /** @class */ (function () {
    function InflightModelChunk(chunk, worker) {
        this.worker = worker;
        this.chunkNumber = chunk;
        this.started = new Date();
    }
    InflightModelChunk.prototype.getWorker = function () {
        return this.worker;
    };
    InflightModelChunk.prototype.getChunkNumber = function () {
        return this.chunkNumber;
    };
    InflightModelChunk.prototype.getStarted = function () {
        return this.started;
    };
    return InflightModelChunk;
}());
exports.InflightModelChunk = InflightModelChunk;
//# sourceMappingURL=types.js.map