"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var const_1 = require("../../const");
var telemetry_1 = require("../telemetry");
var request_1 = require("../request");
var types_1 = require("../../types");
var metrics_1 = require("../metrics");
var urlParse = require('url-parse');
var errorUtils = require("../file-upload-error");
var ControllerFinishRequest = /** @class */ (function () {
    function ControllerFinishRequest(controller) {
        this.controller = controller;
        if (!controller) {
            throw errorUtils.fileUploadError("Controller must be specified");
        }
    }
    ControllerFinishRequest.prototype.run = function () {
        var _this = this;
        // Only verify the upload once at a time
        if (this.controller.uploadStatus.state === types_1.FileUploadServiceState.Verifying ||
            this.controller.uploadStatus.state === types_1.FileUploadServiceState.Completed) {
            return;
        }
        this.controller.setState(types_1.FileUploadServiceState.Verifying);
        this.controller.message('Verifying upload on server.', types_1.MessageLevel.Information);
        this.controller.stopAllWorkers();
        var parsedUrl = urlParse(this.controller.uploadData.uploadDomain
            + types_1.UploadBaseUrls.UploadFinished
            + this.controller.uploadData.assetId, true);
        parsedUrl.query["token"] = this.controller.uploadData.token;
        request_1.default({
            method: 'POST',
            async: true,
            url: parsedUrl.toString(),
            correlationId: this.controller.uploadData.correlationId,
            correlationVector: this.controller.uploadData.correlationVector,
            onError: function (error) {
                _this.controller.log("Finalize upload failed. " + error.message);
                _this.controller.fatalError(const_1.failToUploadMsg, {
                    AssetId: _this.controller.uploadData.assetId,
                    CorrelationId: _this.controller.uploadData.correlationId,
                    message: 'Finalize upload failed',
                    errorMessage: error.message ? error.message : 'none',
                    eventStatusCode: error.event && error.event.currentTarget && error.event.currentTarget.status ? error.event.currentTarget.status : 'none'
                });
            },
            onSuccess: this.onSuccessFinishUpload.bind(this)
        });
    };
    ControllerFinishRequest.prototype.onSuccessFinishUpload = function (response) {
        // it's possible that the health check called complete before this method did.
        // Log the current status and proceed with response verification.
        if (this.controller.uploadStatus.state !== types_1.FileUploadServiceState.Verifying) {
            this.controller.log("Verifying: Upload status has changed, current status:  " + this.controller.uploadStatus.state);
        }
        // if no error then execute callback
        if (response.error === false && response.data.state === 'Done') {
            // Report upload completion.
            this.completeUpload(response);
        }
        else {
            // if chunks are missing enqueue missing chunks
            if (response.data.missing_chunks && response.data.missing_chunks.length > 0) {
                // If there are missing chunks lets adjust the completed count.
                this.controller.uploadStatus.blocksCompleted = this.controller.uploadData.totalBlocks - response.data.missing_chunks.length;
                this.controller.enqueueChunks(response.data.missing_chunks);
                this.controller.setState(types_1.FileUploadServiceState.Uploading);
                this.controller.message("Finalizing found missing  " + response.data.missing_chunks.length + " chunks. Requeuing chunks.", types_1.MessageLevel.Information);
                telemetry_1.trackEvent('UploadAutoRecovery', {
                    chunksMissing: response.data.missing_chunks,
                    AssetId: this.controller.uploadData.assetId,
                    CorrelationId: this.controller.uploadData.correlationId
                });
                this.controller.upload();
                return;
            }
            // if no chunks are missing this must be an unhandled error
            // display the details to the user and stop the upload.
            this.controller.fatalError(response.message, {
                AssetId: this.controller.uploadData.assetId,
                CorrelationId: this.controller.uploadData.correlationId,
            });
        }
    };
    ControllerFinishRequest.prototype.completeUpload = function (uploadResponse) {
        // Only raise the completed event if we've not done it before, this can happen
        // due to a race condition on status checks calling finishUpload simultaneously
        if (this.controller.uploadStatus.state === types_1.FileUploadServiceState.Completed) {
            return;
        }
        this.controller.log(uploadResponse.data.message + ": " + uploadResponse.data.location);
        telemetry_1.trackEvent('UploadFinalized', { AssetId: this.controller.uploadData.assetId, CorrelationId: this.controller.uploadData.correlationId });
        var averageSpeed = metrics_1.calculateAverageSpeedWithChunks(this.controller.uploadStatus.startTime, this.controller.uploadStatus.blocksCompleted, this.controller.uploadData.chunkSize);
        var diff = this.controller.uploadStatus.endTime.valueOf() - this.controller.uploadStatus.startTime.valueOf();
        var seconds = diff / 1000;
        var url = urlParse(uploadResponse.data.absolute_uri + this.controller.uploadData.token);
        var uploadStats = {
            assetId: this.controller.uploadData.assetId,
            secureDownloadUrl: url.href,
            publicDownloadUrl: uploadResponse.data.absolute_uri,
            totalTimeInSeconds: parseFloat(seconds.toFixed(1)),
            averageSpeedInMbps: parseFloat(averageSpeed.toFixed(2))
        };
        this.controller.setState(types_1.FileUploadServiceState.Completed);
        var completeMessage = "Upload completed in:  " + uploadStats.totalTimeInSeconds + " seconds. Average speed: " + uploadStats.averageSpeedInMbps + " Mbps.";
        telemetry_1.trackEvent('UploadCompleted', {
            UploadFileSize: this.controller.uploadData.file.size,
            AssetId: this.controller.uploadData.assetId,
            CorrelationId: this.controller.uploadData.correlationId
        }, { UploadSpeed: uploadStats.averageSpeedInMbps,
            EllapsedSeconds: uploadStats.totalTimeInSeconds
        });
        this.controller.message(completeMessage);
        if (this.controller.uploadData.onCompleted) {
            this.controller.uploadData.onCompleted(uploadStats);
        }
    };
    return ControllerFinishRequest;
}());
exports.default = ControllerFinishRequest;
//# sourceMappingURL=finish.js.map