"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var telemetry_1 = require("../telemetry");
var request_1 = require("../request");
var types_1 = require("../../types");
var urlParse = require('url-parse');
var errorUtils = require("../file-upload-error");
var ControllerCancelRequest = /** @class */ (function () {
    function ControllerCancelRequest(controller) {
        this.controller = controller;
        if (!controller) {
            throw errorUtils.fileUploadError("Controller must be specified");
        }
    }
    ControllerCancelRequest.prototype.run = function () {
        var _this = this;
        var parsedUrl = urlParse(this.controller.uploadData.uploadDomain
            + types_1.UploadBaseUrls.CancelUpload
            + this.controller.uploadData.assetId, true);
        parsedUrl.query["token"] = this.controller.uploadData.token;
        this.controller.log("Cancelling upload for AssetId: " + this.controller.uploadData.assetId);
        telemetry_1.trackEvent('UploadCancelled', {
            AssetId: this.controller.uploadData.assetId,
            CorrelationId: this.controller.uploadData.correlationId,
            url: parsedUrl.toString()
        });
        request_1.default({
            method: 'POST',
            async: true,
            url: parsedUrl.toString(),
            correlationId: this.controller.uploadData.correlationId,
            correlationVector: this.controller.uploadData.correlationVector,
            onSuccess: function (response) {
                _this.onSuccessCancelUpload(response);
            },
            onError: function (error) {
                console.log(error);
            }
        });
    };
    ControllerCancelRequest.prototype.onSuccessCancelUpload = function (response) {
        this.controller.log(response.data.message);
        telemetry_1.trackEvent("cancelSuccess", {
            AssetId: this.controller.uploadData.assetId,
            CorrelationId: this.controller.uploadData.correlationId
        });
        this.controller.setState(types_1.FileUploadServiceState.Cancelled);
        // Make sure that workers are no longer running
        this.controller.stopAllWorkers();
    };
    return ControllerCancelRequest;
}());
exports.default = ControllerCancelRequest;
//# sourceMappingURL=cancel.js.map