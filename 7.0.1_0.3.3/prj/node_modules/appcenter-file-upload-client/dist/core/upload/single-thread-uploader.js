"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var const_1 = require("../../const");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var controller_1 = require("../controller");
var request_1 = require("../request");
var telemetry_1 = require("../telemetry");
var urlParse = require('url-parse');
var SingleThreadUploadController = /** @class */ (function (_super) {
    __extends(SingleThreadUploadController, _super);
    function SingleThreadUploadController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.runningUploadRequests = [];
        return _this;
    }
    SingleThreadUploadController.prototype.healthCheck = function () {
        if (this.uploadStatus.workers.length > 0) {
            this.stopAllWorkers();
        }
        else {
            this.setState(types_1.FileUploadServiceState.Uploading);
        }
        for (var i = 0; i < Math.min(const_1.maxNumberOfConcurrentUploads, this.uploadData.totalBlocks); i++) {
            this.upload();
        }
    };
    SingleThreadUploadController.prototype.cancel = function () {
        this.runningUploadRequests.forEach(function (request) {
            if (request && request.abort) {
                request.abort();
            }
        });
        _super.prototype.cancel.call(this);
    };
    SingleThreadUploadController.prototype.upload = function () {
        var _this = this;
        var chunkNumber = this.uploadStatus.chunkQueue.pop();
        // Safety check in case the queue got emptied before.
        if (chunkNumber === undefined) {
            return;
        }
        // Otherwise just start processing and uploading the chunk
        utils_1.getChunk(chunkNumber, this.uploadData)
            .then(function (chunk) { return _this.uploadChunk(chunk, chunkNumber); });
    };
    SingleThreadUploadController.prototype.uploadChunk = function (chunk, chunkNumber) {
        var _this = this;
        var parsedUrl = urlParse(this.uploadData.uploadDomain
            + types_1.UploadBaseUrls.UploadChunk
            + this.uploadData.assetId, true);
        var chunkSize = chunk.size || chunk.length;
        parsedUrl.query["block_number"] = chunkNumber;
        parsedUrl.query["token"] = this.uploadData.token;
        this.reportEventProgress(chunkNumber, Math.ceil(chunkSize * .1));
        this.runningUploadRequests[chunkNumber] = request_1.default({
            method: 'POST',
            async: true,
            chunk: chunk,
            url: parsedUrl.toString(),
            chunkNumber: chunkNumber,
            correlationId: this.uploadData.correlationId,
            correlationVector: this.uploadData.correlationVector,
            onError: function (error) {
                delete _this.runningUploadRequests[chunkNumber];
                _this.log("Failed to upload chunk: " + _this.uploadData.assetId + " chunkNumber: " + chunkNumber);
                _this.fatalError(const_1.failToUploadMsg, {
                    AssetId: _this.uploadData.assetId,
                    CorrelationId: _this.uploadData.correlationId,
                    message: 'Failed to upload chunk',
                    chunkNumber: error.chunkNumber,
                    errorMessage: error.message ? error.message : 'none',
                    eventStatusCode: error.event && error.event.currentTarget && error.event.currentTarget.status ? error.event.currentTarget.status : 'none'
                });
            },
            onSuccess: function (response) {
                delete _this.runningUploadRequests[chunkNumber];
                if (response.error) {
                    _this.log("Failed to upload chunk: " + _this.uploadData.assetId + " chunkNumber: " + chunkNumber + " retrying...");
                    _this.uploadStatus.chunkQueue.push(chunkNumber);
                    _this.upload();
                }
                else {
                    telemetry_1.trackEvent("uploadChunkSuccess", {
                        chunkNumber: chunkNumber,
                        urlUploadChunk: types_1.UploadBaseUrls.UploadChunk,
                        AssetId: _this.uploadData.assetId,
                        CorrelationId: _this.uploadData.correlationId
                    });
                    _this.uploadStatus.blocksCompleted++;
                    _this.reportEventProgress(chunkNumber, chunkSize);
                    if (_this.uploadStatus.blocksCompleted === _this.uploadData.totalBlocks) {
                        _this.uploadStatus.endTime = new Date();
                        _this.finishUpload();
                    }
                    else {
                        _this.upload();
                    }
                }
            },
            onProgress: function (response) {
                if (!_this.uploadData.onProgressChanged || response.event.lengthComputable) {
                    return;
                }
                var bytesUploaded = Math.ceil(response.event.loaded * 0.75);
                _this.reportEventProgress(chunkNumber, bytesUploaded);
            }
        }, this.log.bind(this));
    };
    return SingleThreadUploadController;
}(controller_1.default));
exports.default = SingleThreadUploadController;
//# sourceMappingURL=single-thread-uploader.js.map