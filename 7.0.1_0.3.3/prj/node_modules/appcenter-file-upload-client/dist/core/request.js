"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var telemetry_1 = require("./telemetry");
var request = require("superagent");
function sendRequest(requestOptions, log) {
    var abort = 0;
    var req = request(requestOptions.method, requestOptions.url)
        .set('X-XblCorrelationId', requestOptions.correlationId)
        .set('MS-CV', requestOptions.correlationVector);
    if (requestOptions.chunk) {
        req.set('Content-Type', 'application/x-binary')
            .on('progress', function (event) {
            if (requestOptions.onProgress) {
                requestOptions.onProgress({
                    event: event,
                    error: false,
                    chunkNumber: requestOptions.chunkNumber
                });
            }
        }).send(requestOptions.chunk);
    }
    req.then(function (res) {
        if (res && res.status >= 200 && res.status < 300) {
            // All 2xxs with JSON only are considered to be successful calls.
            if (requestOptions.onSuccess) {
                var data = res.body;
                requestOptions.onSuccess({
                    event: res,
                    error: data.Error || data.error,
                    data: data,
                    chunkNumber: requestOptions.chunkNumber
                });
            }
        }
    }, function (error) {
        if (error.status !== abort) {
            // Any other status code that's not 0 (aborted) or if the page has markup it is 
            // considered as failed and invokes to the error callback.
            if (requestOptions.onError) {
                requestOptions.onError({
                    event: error,
                    error: true,
                    message: error.responseText,
                    chunkNumber: requestOptions.chunkNumber
                });
            }
        }
        else if (error.status === abort && log) {
            log("Aborting upload request on chunk: " + requestOptions.chunkNumber);
        }
    });
    return req;
}
function sendAndTrackRequest(requestOptions, log) {
    telemetry_1.trackEvent('sendRequest', {
        url: requestOptions.url,
        method: requestOptions.method,
        CorrelationId: requestOptions.correlationId
    });
    return sendRequest(requestOptions, log);
}
exports.default = sendAndTrackRequest;
//# sourceMappingURL=request.js.map