"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var const_1 = require("../const");
function calculateAverageSpeedWithChunks(startTime, blocksCompleted, chunkSize) {
    var bytesCompleted = blocksCompleted * chunkSize;
    return calculateAverageSpeed(startTime, bytesCompleted);
}
exports.calculateAverageSpeedWithChunks = calculateAverageSpeedWithChunks;
function calculateAverageSpeed(startTime, bytesCompleted) {
    // Get the elapsed time in seconds
    var diff = new Date().valueOf() - startTime.valueOf();
    var seconds = diff / 1000;
    // Megabytes per second
    var speed = bytesCompleted / const_1.BYTES_IN_MEGABYTE / seconds;
    return bytesToBits(speed);
}
exports.calculateAverageSpeed = calculateAverageSpeed;
function calculateTimeRemainingWithChunks(chunkQueueLength, chunkSize, averageSpeed) {
    // calculate time remaining using chunks to avoid hitting the disc for size
    var dataRemaining = chunkQueueLength * chunkSize;
    return calculateTimeRemaining(dataRemaining, averageSpeed);
}
exports.calculateTimeRemainingWithChunks = calculateTimeRemainingWithChunks;
function calculateTimeRemaining(bytesRemaining, averageSpeed) {
    if (bytesRemaining > 0 && averageSpeed > 0) {
        var timeInSeconds = bytesToBits(bytesRemaining) / (const_1.BYTES_IN_MEGABYTE * averageSpeed);
        return timeInSeconds;
    }
    return 0;
}
exports.calculateTimeRemaining = calculateTimeRemaining;
function bytesToBits(bytes) {
    return bytes * 8;
}
//# sourceMappingURL=metrics.js.map