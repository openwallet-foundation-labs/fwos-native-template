"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isNode = require("detect-node");
function extend(obj, extObj) {
    if (arguments.length > 2) {
        for (var a = 1; a < arguments.length; a++) {
            this.extend(obj, arguments[a]);
        }
    }
    else {
        for (var i in extObj) {
            obj[i] = extObj[i];
        }
    }
}
exports.extend = extend;
function getChunk(chunkNumber, uploadData) {
    return new Promise(function (resolve, reject) {
        var start = (chunkNumber - 1) * uploadData.chunkSize;
        var end = Math.min(chunkNumber * uploadData.chunkSize, uploadData.file.size);
        if (isNode) {
            var fs = require("fs");
            var Buffer_1 = require("buffer").Buffer;
            if (end - start === uploadData.chunkSize) {
                end--; // have to decrement "end" due to both start and end are inclusive for fs.createReadStream
            }
            var stream = fs.createReadStream(uploadData.file.filePath, {
                start: start, end: end
                // TODO: investigate if we can use "highWaterMark" prop to get whole chunk at once
                // instead of listening "data" event to collect 16KB chunks
            });
            var bufs_1 = [];
            stream.on("data", function (b) { return bufs_1.push(b); });
            stream.on("end", function () { return resolve(Buffer_1.concat(bufs_1)); });
        }
        else {
            resolve(uploadData.file.slice(start, end));
        }
    });
}
exports.getChunk = getChunk;
function timeStamp() {
    return ['[' + new Date().toISOString().slice(11, -1) + ']'];
}
exports.timeStamp = timeStamp;
//# sourceMappingURL=utils.js.map