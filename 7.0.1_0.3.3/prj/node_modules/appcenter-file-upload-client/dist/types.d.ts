export interface IInflightChunk {
    getWorker(): any;
    getChunkNumber(): number;
    getStarted(): Date;
}
export declare const UploadBaseUrls: {
    CancelUpload: string;
    SetMetadata: string;
    UploadChunk: string;
    UploadFinished: string;
    UploadStatus: string;
};
export declare enum FileUploadServiceState {
    New = 0,
    Initialized = 10,
    Uploading = 20,
    ResumeOrRestart = 40,
    Paused = 50,
    Unsupported = 60,
    Cancelled = 80,
    Verifying = 90,
    Completed = 100,
    FatalError = 500
}
export interface IUploadData {
    assetId: string;
    token: string;
    uploadDomain: string;
    logToConsole: boolean;
    onProgressChanged(progress: IProgress): void;
    onCompleted(uploadStats: IUploadResults): void;
    onMessage(errorMessage: string, acfusMessageLevel: MessageLevel): void;
    onStateChanged(status: FileUploadServiceState): void;
}
export interface IProgress {
    percentCompleted: number;
    averageSpeedInMbps: number;
    secondsRemaining: number;
}
export interface IUploadResults {
    assetId: string;
    secureDownloadUrl: string;
    publicDownloadUrl: string;
    totalTimeInSeconds: number;
    averageSpeedInMbps: number;
}
export declare enum MessageLevel {
    Information = 0,
    Verbose = 1,
    Error = 2
}
export interface CustomFile {
    name: string;
    size: number;
    filePath: string;
    contentType?: string;
}
export declare class InflightModelChunk implements IInflightChunk {
    private chunkNumber;
    private started;
    private worker;
    constructor(chunk: number, worker: any);
    getWorker(): any;
    getChunkNumber(): number;
    getStarted(): Date;
}
export interface IFullUploadData extends IUploadData {
    blobPartitions: number;
    callbackUrl: string;
    correlationId: string;
    correlationVector: string;
    chunkSize: number;
    notifyParentWindow: boolean;
    singleThreadMaxUploadSize: number;
    totalBlocks: number;
    uploaders: number;
    file: CustomFile | File;
}
export interface IUploadStatus {
    inflightChunks: InflightModelChunk[];
    autoRetryCount: number;
    averageSpeed: number;
    blocksCompleted: number;
    chunkQueue: number[];
    endTime: Date;
    healthCheckRunning: boolean;
    serviceCallback: {
        autoRetryCount: 5;
        autoRetryDelay: 1;
        failureCount: 0;
    };
    state: FileUploadServiceState;
    transferQueueRate: number[];
    workers: any[];
    workerErrorCount: number;
    startTime: Date;
}
export interface IFileUploadServiceRequest {
    method: string;
    async: boolean;
    url: string;
    chunk?: any;
    chunkNumber?: number;
    correlationId: string;
    correlationVector: string;
    onError(data: IFileUploadServiceResponse): void;
    onSuccess(data: IFileUploadServiceResponse): void;
    onProgress?(data: IFileUploadServiceResponse): void;
}
export interface IFileUploadServiceResponse {
    error: boolean;
    event: any;
    data?: any;
    message?: string;
    chunkNumber?: number;
    disableChunkProgress?: boolean;
}
export interface IWorkerMessage {
    message: string;
    error: boolean;
    chunkNumber: number;
}
export interface IFileUploadServiceDetails {
    id: string;
    token: string;
    uploadDomain: string;
}
export interface IFileUploadClientSettings {
    assetId: string;
    assetDomain: string;
    assetToken: string;
    file?: string | File | CustomFile;
    useLogging?: boolean;
    onProgressChanged?(progress: IProgress): void;
    onMessage?(errorMessage: string, MessageLevel: MessageLevel): void;
    onStateChanged?(status: FileUploadServiceState): void;
}
export interface IFileUploadClient {
    init(data: IUploadData): void;
    start(filepath: string | File | CustomFile): void;
    isUploadInProgress(): boolean;
    cancel(): void;
}
