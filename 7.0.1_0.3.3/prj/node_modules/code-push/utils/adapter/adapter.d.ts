import * as adapterTypes from "./adapter-types";
import * as sdkTypes from "../../script/types";
import RequestManager from "../request-manager";
declare class Adapter {
    private readonly _requestManager;
    constructor(_requestManager: RequestManager);
    toLegacyAccount(profile: adapterTypes.UserProfile): sdkTypes.Account;
    toLegacyAccessKey(apiToken: adapterTypes.ApiToken): sdkTypes.AccessKey;
    toLegacyAccessKeyList(apiTokens: adapterTypes.ApiTokensGetResponse[]): sdkTypes.AccessKey[];
    toLegacyApp(app: adapterTypes.App): Promise<sdkTypes.App>;
    toLegacyApps(apps: adapterTypes.App[]): Promise<sdkTypes.App[]>;
    toApigatewayAppCreationRequest(appToCreate: sdkTypes.AppCreationRequest): adapterTypes.ApigatewayAppCreationRequest;
    addStandardDeployments(apiAppName: string): Promise<void>;
    getRenamedApp(newName: string, appOwner: string, oldName: string): Promise<adapterTypes.UpdatedApp>;
    resolveAccessKey(accessKeyName: string): Promise<adapterTypes.ApiTokensGetResponse>;
    toLegacyDeployments(deployments: adapterTypes.Deployment[]): sdkTypes.Deployment[];
    toLegacyDeployment(deployment: adapterTypes.Deployment): sdkTypes.Deployment;
    toLegacyCollaborators(userList: adapterTypes.UserProfile[], appOwner: string): Promise<sdkTypes.CollaboratorMap>;
    toLegacyDeploymentMetrics(deploymentMetrics: adapterTypes.DeploymentMetrics[]): Promise<sdkTypes.DeploymentMetrics>;
    parseApiAppName(apiAppName: string): Promise<adapterTypes.appParams>;
    toLegacyDeploymentHistory(releases: adapterTypes.CodePushRelease[]): sdkTypes.Package[];
    private toLegacyRestApp;
    toReleaseUploadProperties(updateMetadata: sdkTypes.PackageInfo, releaseUploadAssets: sdkTypes.ReleaseUploadAssets, deploymentName: string): sdkTypes.UploadReleaseProperties;
    toRestReleaseModification(legacyCodePushReleaseInfo: sdkTypes.PackageInfo): adapterTypes.ReleaseModification;
    releaseToPackage(releasePackage: adapterTypes.CodePushRelease): sdkTypes.Package;
    private toLegacyRestDeployments;
    private toLegacyRestDeployment;
    private getUser;
    private getApiTokens;
    private getApp;
    private getDeployments;
    private toLegacyUserPermission;
    private getOrgFromLegacyAppRequest;
    private toAppcenterClientApp;
    private isValidAppCenterAppName;
    private getStringValidator;
    private getCodePushError;
}
export = Adapter;
