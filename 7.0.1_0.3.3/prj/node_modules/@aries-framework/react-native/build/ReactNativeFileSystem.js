"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactNativeFileSystem = void 0;
const core_1 = require("@aries-framework/core");
const RNFS = __importStar(require("react-native-fs"));
class ReactNativeFileSystem {
    /**
     * Create new ReactNativeFileSystem class instance.
     *
     * @param basePath The base path to use for reading and writing files. RNFS.TemporaryDirectoryPath if not specified
     *
     * @see https://github.com/itinance/react-native-fs#constants
     */
    constructor(basePath) {
        this.basePath = basePath !== null && basePath !== void 0 ? basePath : RNFS.TemporaryDirectoryPath;
    }
    async exists(path) {
        return RNFS.exists(path);
    }
    async write(path, data) {
        // Make sure parent directories exist
        await RNFS.mkdir((0, core_1.getDirFromFilePath)(path));
        return RNFS.writeFile(path, data, 'utf8');
    }
    async read(path) {
        return RNFS.readFile(path, 'utf8');
    }
    async downloadToFile(url, path) {
        // Make sure parent directories exist
        await RNFS.mkdir((0, core_1.getDirFromFilePath)(path));
        const { promise } = RNFS.downloadFile({
            fromUrl: url,
            toFile: path,
        });
        await promise;
    }
}
exports.ReactNativeFileSystem = ReactNativeFileSystem;
//# sourceMappingURL=ReactNativeFileSystem.js.map