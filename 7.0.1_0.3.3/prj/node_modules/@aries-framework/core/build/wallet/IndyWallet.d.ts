import type { WalletCreateKeyOptions, DidConfig, DidInfo, WalletSignOptions, UnpackedMessageContext, WalletVerifyOptions, Wallet } from './Wallet';
import type { EncryptedMessage, WalletConfig, WalletConfigRekey, WalletExportImportConfig } from '../types';
import type { Buffer } from '../utils/buffer';
import { AgentDependencies } from '../agent/AgentDependencies';
import { Key } from '../crypto/Key';
import { SigningProviderRegistry } from '../crypto/signing-provider/SigningProviderRegistry';
import { Logger } from '../logger';
export declare class IndyWallet implements Wallet {
    private walletConfig?;
    private walletHandle?;
    private logger;
    private signingKeyProviderRegistry;
    private publicDidInfo;
    private indy;
    constructor(agentDependencies: AgentDependencies, logger: Logger, signingKeyProviderRegistry: SigningProviderRegistry);
    get isProvisioned(): boolean;
    get isInitialized(): boolean;
    /**
     * @deprecated The public did functionality of the wallet has been deprecated in favour of the DidsModule, which can be
     * used to create and resolve dids. Currently the global agent public did functionality is still used by the `LedgerModule`, but
     * will be removed once the `LedgerModule` has been deprecated. Do not use this property for new functionality, but rather
     * use the `DidsModule`.
     */
    get publicDid(): DidInfo | undefined;
    get handle(): number;
    get masterSecretId(): string;
    /**
     * Dispose method is called when an agent context is disposed.
     */
    dispose(): Promise<void>;
    private walletStorageConfig;
    private walletCredentials;
    /**
     * @throws {WalletDuplicateError} if the wallet already exists
     * @throws {WalletError} if another error occurs
     */
    create(walletConfig: WalletConfig): Promise<void>;
    /**
     * @throws {WalletDuplicateError} if the wallet already exists
     * @throws {WalletError} if another error occurs
     */
    createAndOpen(walletConfig: WalletConfig): Promise<void>;
    /**
     * @throws {WalletNotFoundError} if the wallet does not exist
     * @throws {WalletError} if another error occurs
     */
    open(walletConfig: WalletConfig): Promise<void>;
    /**
     * @throws {WalletNotFoundError} if the wallet does not exist
     * @throws {WalletError} if another error occurs
     */
    rotateKey(walletConfig: WalletConfigRekey): Promise<void>;
    /**
     * @throws {WalletNotFoundError} if the wallet does not exist
     * @throws {WalletError} if another error occurs
     */
    private _open;
    /**
     * @throws {WalletNotFoundError} if the wallet does not exist
     * @throws {WalletError} if another error occurs
     */
    delete(): Promise<void>;
    export(exportConfig: WalletExportImportConfig): Promise<void>;
    import(walletConfig: WalletConfig, importConfig: WalletExportImportConfig): Promise<void>;
    /**
     * @throws {WalletError} if the wallet is already closed or another error occurs
     */
    close(): Promise<void>;
    /**
     * Create master secret with specified id in currently opened wallet.
     *
     * If a master secret by this id already exists in the current wallet, the method
     * will return without doing anything.
     *
     * @throws {WalletError} if an error occurs
     */
    private createMasterSecret;
    /**
     * @deprecated The public did functionality of the wallet has been deprecated in favour of the DidsModule, which can be
     * used to create and resolve dids. Currently the global agent public did functionality is still used by the `LedgerModule`, but
     * will be removed once the `LedgerModule` has been deprecated. Do not use this property for new functionality, but rather
     * use the `DidsModule`.
     */
    initPublicDid(didConfig: DidConfig): Promise<void>;
    /**
     * Create a key with an optional seed and keyType.
     * The keypair is also automatically stored in the wallet afterwards
     *
     * Bls12381g1g2 and X25519 are not supported.
     *
     * @param seed string The seed for creating a key
     * @param keyType KeyType the type of key that should be created
     *
     * @returns a Key instance with a publicKeyBase58
     *
     * @throws {WalletError} When an unsupported keytype is requested
     * @throws {WalletError} When the key could not be created
     */
    createKey({ seed, keyType }: WalletCreateKeyOptions): Promise<Key>;
    /**
     * sign a Buffer with an instance of a Key class
     *
     * Bls12381g1g2, Bls12381g1 and X25519 are not supported.
     *
     * @param data Buffer The data that needs to be signed
     * @param key Key The key that is used to sign the data
     *
     * @returns A signature for the data
     */
    sign({ data, key }: WalletSignOptions): Promise<Buffer>;
    /**
     * Verify the signature with the data and the used key
     *
     * Bls12381g1g2, Bls12381g1 and X25519 are not supported.
     *
     * @param data Buffer The data that has to be confirmed to be signed
     * @param key Key The key that was used in the signing process
     * @param signature Buffer The signature that was created by the signing process
     *
     * @returns A boolean whether the signature was created with the supplied data and key
     *
     * @throws {WalletError} When it could not do the verification
     * @throws {WalletError} When an unsupported keytype is used
     */
    verify({ data, key, signature }: WalletVerifyOptions): Promise<boolean>;
    pack(payload: Record<string, unknown>, recipientKeys: string[], senderVerkey?: string): Promise<EncryptedMessage>;
    unpack(messagePackage: EncryptedMessage): Promise<UnpackedMessageContext>;
    generateNonce(): Promise<string>;
    private retrieveKeyPair;
    private storeKeyPair;
    generateWalletKey(): Promise<string>;
}
