import type { AgentDependencies } from './AgentDependencies';
import type { Logger } from '../logger';
import type { InitConfig } from '../types';
import { LogLevel } from '../logger';
import { AutoAcceptCredential } from '../modules/credentials/models/CredentialAutoAcceptType';
import { AutoAcceptProof } from '../modules/proofs/models/ProofAutoAcceptType';
import { DidCommMimeType } from '../types';
export declare class AgentConfig {
    private initConfig;
    label: string;
    logger: Logger;
    readonly agentDependencies: AgentDependencies;
    constructor(initConfig: InitConfig, agentDependencies: AgentDependencies);
    /**
     * @deprecated use connectToIndyLedgersOnStartup from the `LedgerModuleConfig` class
     */
    get connectToIndyLedgersOnStartup(): boolean;
    /**
     * @deprecated The public did functionality of the wallet has been deprecated in favour of the DidsModule, which can be
     * used to create and resolve dids. Currently the global agent public did functionality is still used by the `LedgerModule`, but
     * will be removed once the `LedgerModule` has been deprecated. Do not use this property for new functionality, but rather
     * use the `DidsModule`.
     */
    get publicDidSeed(): string | undefined;
    /**
     * @deprecated use indyLedgers from the `LedgerModuleConfig` class
     */
    get indyLedgers(): import("..").IndyPoolConfig[];
    /**
     * @todo move to context configuration
     */
    get walletConfig(): import("../types").WalletConfig | undefined;
    /**
     * @deprecated use autoAcceptConnections from the `ConnectionsModuleConfig` class
     */
    get autoAcceptConnections(): boolean;
    /**
     * @deprecated use autoAcceptProofs from the `ProofsModuleConfig` class
     */
    get autoAcceptProofs(): AutoAcceptProof;
    /**
     * @deprecated use autoAcceptCredentials from the `CredentialsModuleConfig` class
     */
    get autoAcceptCredentials(): AutoAcceptCredential;
    get didCommMimeType(): DidCommMimeType;
    /**
     * @deprecated use mediatorPollingInterval from the `RecipientModuleConfig` class
     */
    get mediatorPollingInterval(): number;
    /**
     * @deprecated use mediatorPickupStrategy from the `RecipientModuleConfig` class
     */
    get mediatorPickupStrategy(): import("..").MediatorPickupStrategy | undefined;
    /**
     * @deprecated use maximumMessagePickup from the `RecipientModuleConfig` class
     */
    get maximumMessagePickup(): number;
    /**
     * @deprecated use baseMediatorReconnectionIntervalMs from the `RecipientModuleConfig` class
     */
    get baseMediatorReconnectionIntervalMs(): number;
    /**
     * @deprecated use maximumMediatorReconnectionIntervalMs from the `RecipientModuleConfig` class
     */
    get maximumMediatorReconnectionIntervalMs(): number;
    /**
     * Encode keys in did:key format instead of 'naked' keys, as stated in Aries RFC 0360.
     *
     * This setting will not be taken into account if the other party has previously used naked keys
     * in a given protocol (i.e. it does not support Aries RFC 0360).
     */
    get useDidKeyInProtocols(): boolean;
    get endpoints(): [string, ...string[]];
    /**
     * @deprecated use mediatorInvitationUrl from the `RecipientModuleConfig` class
     */
    get mediatorConnectionsInvite(): string | undefined;
    /**
     * @deprecated use autoAcceptMediationRequests from the `MediatorModuleConfig` class
     */
    get autoAcceptMediationRequests(): boolean;
    /**
     * @deprecated you can use `RecipientApi.setDefaultMediator` to set the default mediator.
     */
    get defaultMediatorId(): string | undefined;
    /**
     * @deprecated you can set the `default` tag to `false` (or remove it completely) to clear the default mediator.
     */
    get clearDefaultMediator(): boolean;
    get useLegacyDidSovPrefix(): boolean;
    /**
     * @todo move to context configuration
     */
    get connectionImageUrl(): string | undefined;
    get autoUpdateStorageOnStartup(): boolean;
    extend(config: Partial<InitConfig>): AgentConfig;
    toJSON(): {
        walletConfig: {
            key: string | undefined;
            storage: {
                credentials: string | undefined;
                type?: string | undefined;
            };
            id?: string | undefined;
            keyDerivationMethod?: import("../types").KeyDerivationMethod | undefined;
            masterSecretId?: string | undefined;
        };
        logger: LogLevel;
        agentDependencies: boolean;
        label: string;
        endpoints?: string[] | undefined;
        publicDidSeed?: string | undefined;
        didCommMimeType?: DidCommMimeType | undefined;
        useDidKeyInProtocols?: boolean | undefined;
        useLegacyDidSovPrefix?: boolean | undefined;
        connectionImageUrl?: string | undefined;
        autoUpdateStorageOnStartup?: boolean | undefined;
        autoAcceptConnections?: boolean | undefined;
        autoAcceptProofs?: AutoAcceptProof | undefined;
        autoAcceptCredentials?: AutoAcceptCredential | undefined;
        /**
         * @todo move to context configuration
         */
        indyLedgers?: import("..").IndyPoolConfig[] | undefined;
        connectToIndyLedgersOnStartup?: boolean | undefined;
        autoAcceptMediationRequests?: boolean | undefined;
        mediatorConnectionsInvite?: string | undefined;
        defaultMediatorId?: string | undefined;
        clearDefaultMediator?: boolean | undefined;
        mediatorPollingInterval?: number | undefined;
        mediatorPickupStrategy?: import("..").MediatorPickupStrategy | undefined;
        maximumMessagePickup?: number | undefined;
        baseMediatorReconnectionIntervalMs?: number | undefined;
        maximumMediatorReconnectionIntervalMs?: number | undefined;
    };
}
