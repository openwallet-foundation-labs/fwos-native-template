"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dispatcher = void 0;
const constants_1 = require("../constants");
const AriesFrameworkError_1 = require("../error/AriesFrameworkError");
const plugins_1 = require("../plugins");
const ProblemReportMessage_1 = require("./../modules/problem-reports/messages/ProblemReportMessage");
const EventEmitter_1 = require("./EventEmitter");
const Events_1 = require("./Events");
const MessageHandlerRegistry_1 = require("./MessageHandlerRegistry");
const MessageSender_1 = require("./MessageSender");
const models_1 = require("./models");
let Dispatcher = class Dispatcher {
    constructor(messageSender, eventEmitter, messageHandlerRegistry, logger) {
        this.messageSender = messageSender;
        this.eventEmitter = eventEmitter;
        this.messageHandlerRegistry = messageHandlerRegistry;
        this.logger = logger;
    }
    /**
     * @deprecated Use {@link MessageHandlerRegistry.registerMessageHandler} directly
     */
    registerMessageHandler(messageHandler) {
        this.messageHandlerRegistry.registerMessageHandler(messageHandler);
    }
    async dispatch(messageContext) {
        const { agentContext, connection, senderKey, recipientKey, message } = messageContext;
        const messageHandler = this.messageHandlerRegistry.getHandlerForMessageType(message.type);
        if (!messageHandler) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`No handler for message type "${message.type}" found`);
        }
        let outboundMessage;
        try {
            outboundMessage = await messageHandler.handle(messageContext);
        }
        catch (error) {
            const problemReportMessage = error.problemReport;
            if (problemReportMessage instanceof ProblemReportMessage_1.ProblemReportMessage && messageContext.connection) {
                problemReportMessage.setThread({
                    threadId: message.threadId,
                });
                outboundMessage = new models_1.OutboundMessageContext(problemReportMessage, {
                    agentContext,
                    connection: messageContext.connection,
                });
            }
            else {
                this.logger.error(`Error handling message with type ${message.type}`, {
                    message: message.toJSON(),
                    error,
                    senderKey: senderKey === null || senderKey === void 0 ? void 0 : senderKey.fingerprint,
                    recipientKey: recipientKey === null || recipientKey === void 0 ? void 0 : recipientKey.fingerprint,
                    connectionId: connection === null || connection === void 0 ? void 0 : connection.id,
                });
                throw error;
            }
        }
        if (outboundMessage) {
            if (outboundMessage.isOutboundServiceMessage()) {
                await this.messageSender.sendMessageToService(outboundMessage);
            }
            else {
                outboundMessage.sessionId = messageContext.sessionId;
                await this.messageSender.sendMessage(outboundMessage);
            }
        }
        // Emit event that allows to hook into received messages
        this.eventEmitter.emit(agentContext, {
            type: Events_1.AgentEventTypes.AgentMessageProcessed,
            payload: {
                message,
                connection,
            },
        });
    }
};
Dispatcher = __decorate([
    (0, plugins_1.injectable)(),
    __param(3, (0, plugins_1.inject)(constants_1.InjectionSymbols.Logger)),
    __metadata("design:paramtypes", [MessageSender_1.MessageSender,
        EventEmitter_1.EventEmitter,
        MessageHandlerRegistry_1.MessageHandlerRegistry, Object])
], Dispatcher);
exports.Dispatcher = Dispatcher;
//# sourceMappingURL=Dispatcher.js.map