import type { AgentConfig } from './AgentConfig';
import type { AgentApi, EmptyModuleMap, ModulesMap, WithoutDefaultModules, CustomOrDefaultApi } from './AgentModules';
import type { TransportSession } from './TransportService';
import type { Logger } from '../logger';
import type { CredentialsModule } from '../modules/credentials';
import type { DependencyManager } from '../plugins';
import { BasicMessagesApi } from '../modules/basic-messages';
import { ConnectionsApi } from '../modules/connections';
import { DidsApi } from '../modules/dids';
import { DiscoverFeaturesApi } from '../modules/discover-features';
import { GenericRecordsApi } from '../modules/generic-records';
import { LedgerApi } from '../modules/ledger';
import { OutOfBandApi } from '../modules/oob';
import { ProofsApi } from '../modules/proofs/ProofsApi';
import { MediatorApi, RecipientApi } from '../modules/routing';
import { WalletApi } from '../wallet';
import { EventEmitter } from './EventEmitter';
import { FeatureRegistry } from './FeatureRegistry';
import { MessageReceiver } from './MessageReceiver';
import { MessageSender } from './MessageSender';
import { TransportService } from './TransportService';
import { AgentContext } from './context';
export declare abstract class BaseAgent<AgentModules extends ModulesMap = EmptyModuleMap> {
    protected agentConfig: AgentConfig;
    protected logger: Logger;
    readonly dependencyManager: DependencyManager;
    protected eventEmitter: EventEmitter;
    protected featureRegistry: FeatureRegistry;
    protected messageReceiver: MessageReceiver;
    protected transportService: TransportService;
    protected messageSender: MessageSender;
    protected _isInitialized: boolean;
    protected agentContext: AgentContext;
    readonly connections: ConnectionsApi;
    readonly credentials: CustomOrDefaultApi<AgentModules['credentials'], CredentialsModule>;
    readonly proofs: ProofsApi;
    readonly mediator: MediatorApi;
    readonly mediationRecipient: RecipientApi;
    readonly basicMessages: BasicMessagesApi;
    readonly genericRecords: GenericRecordsApi;
    readonly ledger: LedgerApi;
    readonly discovery: DiscoverFeaturesApi;
    readonly dids: DidsApi;
    readonly wallet: WalletApi;
    readonly oob: OutOfBandApi;
    readonly modules: AgentApi<WithoutDefaultModules<AgentModules>>;
    constructor(agentConfig: AgentConfig, dependencyManager: DependencyManager);
    get isInitialized(): boolean;
    initialize(): Promise<void>;
    /**
     * @deprecated The publicDid property has been deprecated in favour of the DidsModule, which can be used to
     * create and resolve dids. Currently the global agent `publicDid` property is still used by the `LedgerModule`, but
     * will be removed once the LedgerApi has been refactored. Do not use this property for new functionality, but rather
     * use the `DidsModule`.
     */
    get publicDid(): import("../wallet").DidInfo | undefined;
    /**
     * Receive a message. This should mainly be used for receiving connection-less messages.
     *
     * If you want to receive messages that originated from e.g. a transport make sure to use the {@link MessageReceiver}
     * for this. The `receiveMessage` method on the `Agent` class will associate the current context to the message, which
     * may not be what should happen (e.g. in case of multi tenancy).
     */
    receiveMessage(inboundMessage: unknown, session?: TransportSession): Promise<void>;
    get injectionContainer(): import("tsyringe").DependencyContainer;
    get config(): AgentConfig;
    get context(): AgentContext;
}
