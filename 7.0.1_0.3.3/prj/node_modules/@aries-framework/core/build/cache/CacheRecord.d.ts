import type { RecordTags, TagsBase } from '../storage/BaseRecord';
import { BaseRecord } from '../storage/BaseRecord';
export type CustomCacheTags = TagsBase;
export type DefaultCacheTags = TagsBase;
export type CacheTags = RecordTags<CacheRecord>;
export interface CacheStorageProps {
    id?: string;
    createdAt?: Date;
    tags?: CustomCacheTags;
    entries: Array<{
        key: string;
        value: unknown;
    }>;
}
export declare class CacheRecord extends BaseRecord<DefaultCacheTags, CustomCacheTags> {
    entries: Array<{
        key: string;
        value: unknown;
    }>;
    static readonly type = "CacheRecord";
    readonly type = "CacheRecord";
    constructor(props: CacheStorageProps);
    getTags(): {
        [x: string]: import("../storage/BaseRecord").TagValue;
        [x: number]: never;
    };
}
