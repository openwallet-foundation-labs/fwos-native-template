export declare const indyErrors: {
    readonly 100: "CommonInvalidParam1";
    readonly 101: "CommonInvalidParam2";
    readonly 102: "CommonInvalidParam3";
    readonly 103: "CommonInvalidParam4";
    readonly 104: "CommonInvalidParam5";
    readonly 105: "CommonInvalidParam6";
    readonly 106: "CommonInvalidParam7";
    readonly 107: "CommonInvalidParam8";
    readonly 108: "CommonInvalidParam9";
    readonly 109: "CommonInvalidParam10";
    readonly 110: "CommonInvalidParam11";
    readonly 111: "CommonInvalidParam12";
    readonly 112: "CommonInvalidState";
    readonly 113: "CommonInvalidStructure";
    readonly 114: "CommonIOError";
    readonly 115: "CommonInvalidParam13";
    readonly 116: "CommonInvalidParam14";
    readonly 200: "WalletInvalidHandle";
    readonly 201: "WalletUnknownTypeError";
    readonly 202: "WalletTypeAlreadyRegisteredError";
    readonly 203: "WalletAlreadyExistsError";
    readonly 204: "WalletNotFoundError";
    readonly 205: "WalletIncompatiblePoolError";
    readonly 206: "WalletAlreadyOpenedError";
    readonly 207: "WalletAccessFailed";
    readonly 208: "WalletInputError";
    readonly 209: "WalletDecodingError";
    readonly 210: "WalletStorageError";
    readonly 211: "WalletEncryptionError";
    readonly 212: "WalletItemNotFound";
    readonly 213: "WalletItemAlreadyExists";
    readonly 214: "WalletQueryError";
    readonly 300: "PoolLedgerNotCreatedError";
    readonly 301: "PoolLedgerInvalidPoolHandle";
    readonly 302: "PoolLedgerTerminated";
    readonly 303: "LedgerNoConsensusError";
    readonly 304: "LedgerInvalidTransaction";
    readonly 305: "LedgerSecurityError";
    readonly 306: "PoolLedgerConfigAlreadyExistsError";
    readonly 307: "PoolLedgerTimeout";
    readonly 308: "PoolIncompatibleProtocolVersion";
    readonly 309: "LedgerNotFound";
    readonly 400: "AnoncredsRevocationRegistryFullError";
    readonly 401: "AnoncredsInvalidUserRevocId";
    readonly 404: "AnoncredsMasterSecretDuplicateNameError";
    readonly 405: "AnoncredsProofRejected";
    readonly 406: "AnoncredsCredentialRevoked";
    readonly 407: "AnoncredsCredDefAlreadyExistsError";
    readonly 500: "UnknownCryptoTypeError";
    readonly 600: "DidAlreadyExistsError";
    readonly 700: "PaymentUnknownMethodError";
    readonly 701: "PaymentIncompatibleMethodsError";
    readonly 702: "PaymentInsufficientFundsError";
    readonly 703: "PaymentSourceDoesNotExistError";
    readonly 704: "PaymentOperationNotSupportedError";
    readonly 705: "PaymentExtraFundsError";
    readonly 706: "TransactionNotAllowedError";
};
type IndyErrorValues = (typeof indyErrors)[keyof typeof indyErrors];
export interface IndyError {
    name: 'IndyError';
    message: string;
    indyName?: string;
}
export declare function isIndyError(error: any, errorName?: IndyErrorValues): error is IndyError;
export {};
