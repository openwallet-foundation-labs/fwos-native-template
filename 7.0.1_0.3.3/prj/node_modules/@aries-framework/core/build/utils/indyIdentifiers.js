"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLegacyCredentialDefinitionId = exports.getLegacySchemaId = exports.getQualifiedIndySchemaId = exports.getQualifiedIndyCredentialDefinitionId = exports.isQualifiedIndyIdentifier = void 0;
function isQualifiedIndyIdentifier(identifier) {
    if (!identifier || identifier === '')
        return false;
    return identifier.startsWith('did:indy:');
}
exports.isQualifiedIndyIdentifier = isQualifiedIndyIdentifier;
function getQualifiedIndyCredentialDefinitionId(indyNamespace, unqualifiedCredentialDefinitionId) {
    if (isQualifiedIndyIdentifier(unqualifiedCredentialDefinitionId))
        return unqualifiedCredentialDefinitionId;
    // 5nDyJVP1NrcPAttP3xwMB9:3:CL:56495:npbd
    const [did, , , seqNo, tag] = unqualifiedCredentialDefinitionId.split(':');
    return `did:indy:${indyNamespace}:${did}/anoncreds/v0/CLAIM_DEF/${seqNo}/${tag}`;
}
exports.getQualifiedIndyCredentialDefinitionId = getQualifiedIndyCredentialDefinitionId;
/**
 *
 * @see https://hyperledger.github.io/indy-did-method/#schema
 *
 */
function getQualifiedIndySchemaId(indyNamespace, schemaId) {
    if (isQualifiedIndyIdentifier(schemaId))
        return schemaId;
    // F72i3Y3Q4i466efjYJYCHM:2:npdb:4.3.4
    const [did, , schemaName, schemaVersion] = schemaId.split(':');
    return `did:indy:${indyNamespace}:${did}/anoncreds/v0/SCHEMA/${schemaName}/${schemaVersion}`;
}
exports.getQualifiedIndySchemaId = getQualifiedIndySchemaId;
function getLegacySchemaId(unqualifiedDid, name, version) {
    return `${unqualifiedDid}:2:${name}:${version}`;
}
exports.getLegacySchemaId = getLegacySchemaId;
function getLegacyCredentialDefinitionId(unqualifiedDid, seqNo, tag) {
    return `${unqualifiedDid}:3:CL:${seqNo}:${tag}`;
}
exports.getLegacyCredentialDefinitionId = getLegacyCredentialDefinitionId;
//# sourceMappingURL=indyIdentifiers.js.map