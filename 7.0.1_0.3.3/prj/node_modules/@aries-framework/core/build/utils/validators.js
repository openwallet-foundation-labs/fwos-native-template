"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsUri = exports.UriValidator = exports.isStringArray = exports.IsInstanceOrArrayOfInstances = exports.IsStringOrInstance = void 0;
const class_validator_1 = require("class-validator");
/**
 * Checks if the value is a string or the specified instance
 */
function IsStringOrInstance(targetType, validationOptions) {
    return (0, class_validator_1.ValidateBy)({
        name: 'IsStringOrInstance',
        constraints: [targetType],
        validator: {
            validate: (value, args) => (0, class_validator_1.isString)(value) || (0, class_validator_1.isInstance)(value, args === null || args === void 0 ? void 0 : args.constraints[0]),
            defaultMessage: (0, class_validator_1.buildMessage)((eachPrefix, args) => {
                if (args === null || args === void 0 ? void 0 : args.constraints[0]) {
                    return eachPrefix + `$property must be of type string or instance of ${args.constraints[0].name}`;
                }
                else {
                    return eachPrefix + `IsStringOrInstance decorator expects an object as value, but got falsy value.`;
                }
            }, validationOptions),
        },
    }, validationOptions);
}
exports.IsStringOrInstance = IsStringOrInstance;
function IsInstanceOrArrayOfInstances(validationOptions) {
    return (0, class_validator_1.ValidateBy)({
        name: 'isInstanceOrArrayOfInstances',
        validator: {
            validate: (value) => {
                if (Array.isArray(value)) {
                    value.forEach((item) => {
                        if (!(0, class_validator_1.isInstance)(item, validationOptions.classType)) {
                            return false;
                        }
                    });
                    return true;
                }
                return (0, class_validator_1.isInstance)(value, validationOptions.classType);
            },
            defaultMessage: (0, class_validator_1.buildMessage)((eachPrefix) => eachPrefix + `$property must be a string or instance of ${validationOptions.classType.name}`, validationOptions),
        },
    }, validationOptions);
}
exports.IsInstanceOrArrayOfInstances = IsInstanceOrArrayOfInstances;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isStringArray(value) {
    return Array.isArray(value) && value.every((v) => typeof v === 'string');
}
exports.isStringArray = isStringArray;
exports.UriValidator = /\w+:(\/?\/?)[^\s]+/;
function IsUri(validationOptions) {
    return (0, class_validator_1.ValidateBy)({
        name: 'isUri',
        validator: {
            validate: (value) => {
                return exports.UriValidator.test(value);
            },
            defaultMessage: (0, class_validator_1.buildMessage)((eachPrefix) => eachPrefix + `$property must be a string that matches regex: ${exports.UriValidator.source}`, validationOptions),
        },
    }, validationOptions);
}
exports.IsUri = IsUri;
//# sourceMappingURL=validators.js.map