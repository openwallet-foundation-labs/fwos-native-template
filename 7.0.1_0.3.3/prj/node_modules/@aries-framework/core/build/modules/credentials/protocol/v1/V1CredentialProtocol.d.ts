import type { AgentContext } from '../../../../agent';
import type { AgentMessage } from '../../../../agent/AgentMessage';
import type { FeatureRegistry } from '../../../../agent/FeatureRegistry';
import type { InboundMessageContext } from '../../../../agent/models/InboundMessageContext';
import type { DependencyManager } from '../../../../plugins';
import type { ProblemReportMessage } from '../../../problem-reports';
import type { AcceptCredentialOptions, AcceptOfferOptions, AcceptProposalOptions, AcceptRequestOptions, CreateOfferOptions, CreateProblemReportOptions, CreateProposalOptions, CredentialProtocolMsgReturnType, NegotiateOfferOptions, NegotiateProposalOptions } from '../../CredentialProtocolOptions';
import type { GetFormatDataReturn } from '../../CredentialsApiOptions';
import type { CredentialFormatService, ExtractCredentialFormats, IndyCredentialFormat } from '../../formats';
import { CredentialExchangeRecord } from '../../repository';
import { BaseCredentialProtocol } from '../BaseCredentialProtocol';
import { V1CredentialAckMessage, V1IssueCredentialMessage, V1OfferCredentialMessage, V1ProposeCredentialMessage, V1RequestCredentialMessage } from './messages';
export interface V1CredentialProtocolConfig {
    indyCredentialFormat: CredentialFormatService<IndyCredentialFormat>;
}
export declare class V1CredentialProtocol extends BaseCredentialProtocol<[CredentialFormatService<IndyCredentialFormat>]> {
    private indyCredentialFormat;
    constructor({ indyCredentialFormat }: V1CredentialProtocolConfig);
    /**
     * The version of the issue credential protocol this service supports
     */
    readonly version = "v1";
    /**
     * Registers the protocol implementation (handlers, feature registry) on the agent.
     */
    register(dependencyManager: DependencyManager, featureRegistry: FeatureRegistry): void;
    /**
     * Create a {@link ProposeCredentialMessage} not bound to an existing credential exchange.
     * To create a proposal as response to an existing credential exchange, use {@link createProposalAsResponse}.
     *
     * @param options The object containing config options
     * @returns Object containing proposal message and associated credential record
     *
     */
    createProposal(agentContext: AgentContext, { connection, credentialFormats, comment, autoAcceptCredential, }: CreateProposalOptions<[CredentialFormatService<IndyCredentialFormat>]>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    /**
     * Process a received {@link ProposeCredentialMessage}. This will not accept the credential proposal
     * or send a credential offer. It will only create a new, or update the existing credential record with
     * the information from the credential proposal message. Use {@link createOfferAsResponse}
     * after calling this method to create a credential offer.
     *
     * @param messageContext The message context containing a credential proposal message
     * @returns credential record associated with the credential proposal message
     *
     */
    processProposal(messageContext: InboundMessageContext<V1ProposeCredentialMessage>): Promise<CredentialExchangeRecord>;
    /**
     * Processing an incoming credential message and create a credential offer as a response
     * @param options The object containing config options
     * @returns Object containing proposal message and associated credential record
     */
    acceptProposal(agentContext: AgentContext, { credentialRecord, credentialFormats, comment, autoAcceptCredential, }: AcceptProposalOptions<[CredentialFormatService<IndyCredentialFormat>]>): Promise<CredentialProtocolMsgReturnType<V1OfferCredentialMessage>>;
    /**
     * Negotiate a credential proposal as issuer (by sending a credential offer message) to the connection
     * associated with the credential record.
     *
     * @param options configuration for the offer see {@link NegotiateProposalOptions}
     * @returns Credential record associated with the credential offer and the corresponding new offer message
     *
     */
    negotiateProposal(agentContext: AgentContext, { credentialFormats, credentialRecord, comment, autoAcceptCredential, }: NegotiateProposalOptions<[CredentialFormatService<IndyCredentialFormat>]>): Promise<CredentialProtocolMsgReturnType<V1OfferCredentialMessage>>;
    /**
     * Create a {@link OfferCredentialMessage} not bound to an existing credential exchange.
     * To create an offer as response to an existing credential exchange, use {@link V1CredentialProtocol#createOfferAsResponse}.
     *
     * @param options The options containing config params for creating the credential offer
     * @returns Object containing offer message and associated credential record
     *
     */
    createOffer(agentContext: AgentContext, { credentialFormats, autoAcceptCredential, comment, connection, }: CreateOfferOptions<[CredentialFormatService<IndyCredentialFormat>]>): Promise<CredentialProtocolMsgReturnType<V1OfferCredentialMessage>>;
    /**
     * Process a received {@link OfferCredentialMessage}. This will not accept the credential offer
     * or send a credential request. It will only create a new credential record with
     * the information from the credential offer message. Use {@link createRequest}
     * after calling this method to create a credential request.
     *
     * @param messageContext The message context containing a credential request message
     * @returns credential record associated with the credential offer message
     *
     */
    processOffer(messageContext: InboundMessageContext<V1OfferCredentialMessage>): Promise<CredentialExchangeRecord>;
    /**
     * Create a {@link RequestCredentialMessage} as response to a received credential offer.
     *
     * @param options configuration to use for the credential request
     * @returns Object containing request message and associated credential record
     *
     */
    acceptOffer(agentContext: AgentContext, { credentialRecord, credentialFormats, comment, autoAcceptCredential, }: AcceptOfferOptions<[CredentialFormatService<IndyCredentialFormat>]>): Promise<CredentialProtocolMsgReturnType<V1RequestCredentialMessage>>;
    /**
     * Process a received {@link RequestCredentialMessage}. This will not accept the credential request
     * or send a credential. It will only update the existing credential record with
     * the information from the credential request message. Use {@link createCredential}
     * after calling this method to create a credential.
     *
     * @param messageContext The message context containing a credential request message
     * @returns credential record associated with the credential request message
     *
     */
    negotiateOffer(agentContext: AgentContext, { credentialFormats, credentialRecord, autoAcceptCredential, comment, }: NegotiateOfferOptions<[CredentialFormatService<IndyCredentialFormat>]>): Promise<CredentialProtocolMsgReturnType<AgentMessage>>;
    /**
     * Starting from a request is not supported in v1 of the issue credential protocol
     * because indy doesn't allow to start from a request
     */
    createRequest(): Promise<CredentialProtocolMsgReturnType<V1RequestCredentialMessage>>;
    /**
     * Process a received {@link IssueCredentialMessage}. This will not accept the credential
     * or send a credential acknowledgement. It will only update the existing credential record with
     * the information from the issue credential message. Use {@link createAck}
     * after calling this method to create a credential acknowledgement.
     *
     * @param messageContext The message context containing an issue credential message
     *
     * @returns credential record associated with the issue credential message
     *
     */
    processRequest(messageContext: InboundMessageContext<V1RequestCredentialMessage>): Promise<CredentialExchangeRecord>;
    /**
     * Create a {@link IssueCredentialMessage} as response to a received credential request.
     *
     * @returns Object containing issue credential message and associated credential record
     *
     */
    acceptRequest(agentContext: AgentContext, { credentialRecord, credentialFormats, comment, autoAcceptCredential, }: AcceptRequestOptions<[CredentialFormatService<IndyCredentialFormat>]>): Promise<CredentialProtocolMsgReturnType<V1IssueCredentialMessage>>;
    /**
     * Process an incoming {@link IssueCredentialMessage}
     *
     * @param messageContext The message context containing a credential acknowledgement message
     * @returns credential record associated with the credential acknowledgement message
     *
     */
    processCredential(messageContext: InboundMessageContext<V1IssueCredentialMessage>): Promise<CredentialExchangeRecord>;
    /**
     * Create a {@link CredentialAckMessage} as response to a received credential.
     *
     * @param credentialRecord The credential record for which to create the credential acknowledgement
     * @returns Object containing credential acknowledgement message and associated credential record
     *
     */
    acceptCredential(agentContext: AgentContext, { credentialRecord }: AcceptCredentialOptions): Promise<CredentialProtocolMsgReturnType<V1CredentialAckMessage>>;
    /**
     * Process a received {@link CredentialAckMessage}.
     *
     * @param messageContext The message context containing a credential acknowledgement message
     * @returns credential record associated with the credential acknowledgement message
     *
     */
    processAck(messageContext: InboundMessageContext<V1CredentialAckMessage>): Promise<CredentialExchangeRecord>;
    /**
     * Create a {@link V1CredentialProblemReportMessage} to be sent.
     *
     * @param message message to send
     * @returns a {@link V1CredentialProblemReportMessage}
     *
     */
    createProblemReport(agentContext: AgentContext, options: CreateProblemReportOptions): ProblemReportMessage;
    shouldAutoRespondToProposal(agentContext: AgentContext, options: {
        credentialRecord: CredentialExchangeRecord;
        proposalMessage: V1ProposeCredentialMessage;
    }): Promise<boolean>;
    shouldAutoRespondToOffer(agentContext: AgentContext, options: {
        credentialRecord: CredentialExchangeRecord;
        offerMessage: V1OfferCredentialMessage;
    }): Promise<boolean>;
    shouldAutoRespondToRequest(agentContext: AgentContext, options: {
        credentialRecord: CredentialExchangeRecord;
        requestMessage: V1RequestCredentialMessage;
    }): Promise<boolean>;
    shouldAutoRespondToCredential(agentContext: AgentContext, options: {
        credentialRecord: CredentialExchangeRecord;
        credentialMessage: V1IssueCredentialMessage;
    }): Promise<boolean>;
    findProposalMessage(agentContext: AgentContext, credentialExchangeId: string): Promise<V1ProposeCredentialMessage | null>;
    findOfferMessage(agentContext: AgentContext, credentialExchangeId: string): Promise<V1OfferCredentialMessage | null>;
    findRequestMessage(agentContext: AgentContext, credentialExchangeId: string): Promise<V1RequestCredentialMessage | null>;
    findCredentialMessage(agentContext: AgentContext, credentialExchangeId: string): Promise<V1IssueCredentialMessage | null>;
    getFormatData(agentContext: AgentContext, credentialExchangeId: string): Promise<GetFormatDataReturn<ExtractCredentialFormats<[CredentialFormatService<IndyCredentialFormat>]>>>;
    private rfc0592ProposalFromV1ProposeMessage;
    private assertOnlyIndyFormat;
    getFormatServiceForRecordType(credentialRecordType: string): CredentialFormatService<IndyCredentialFormat>;
}
