import type { AgentContext } from '../../../agent';
import type { IndyPoolConfig } from '../IndyPool';
import type { default as Indy, LedgerReadReplyResponse, LedgerRequest, LedgerWriteReplyResponse } from 'indy-sdk';
import { Subject } from 'rxjs';
import { AgentDependencies } from '../../../agent/AgentDependencies';
import { CacheRepository } from '../../../cache';
import { Logger } from '../../../logger/Logger';
import { FileSystem } from '../../../storage/FileSystem';
import { IndyPool } from '../IndyPool';
export declare const DID_POOL_CACHE_ID = "DID_POOL_CACHE";
export declare const DID_POOL_CACHE_LIMIT = 500;
export interface CachedDidResponse {
    nymResponse: Indy.GetNymResponse;
    poolId: string;
}
export declare class IndyPoolService {
    pools: IndyPool[];
    private logger;
    private indy;
    private agentDependencies;
    private stop$;
    private fileSystem;
    private didCache;
    constructor(cacheRepository: CacheRepository, agentDependencies: AgentDependencies, logger: Logger, stop$: Subject<boolean>, fileSystem: FileSystem);
    setPools(poolConfigs: IndyPoolConfig[]): void;
    /**
     * Create connections to all ledger pools
     */
    connectToPools(): Promise<number[]>;
    /**
     * @deprecated use instead getPoolForNamespace
     * Get the pool used for writing to the ledger. For now we always use the first pool
     *  as the pool that writes to the ledger
     */
    get ledgerWritePool(): IndyPool;
    /**
     * Get the most appropriate pool for the given did. The algorithm is based on the approach as described in this document:
     * https://docs.google.com/document/d/109C_eMsuZnTnYe2OAd02jAts1vC4axwEKIq7_4dnNVA/edit
     */
    getPoolForDid(agentContext: AgentContext, did: string): Promise<{
        pool: IndyPool;
        did: Indy.GetNymResponse;
    }>;
    private getSettledDidResponsesFromPools;
    /**
     * Get the most appropriate pool for the given indyNamespace
     */
    getPoolForNamespace(indyNamespace?: string): IndyPool;
    submitWriteRequest(agentContext: AgentContext, pool: IndyPool, request: LedgerRequest, signDid: string): Promise<LedgerWriteReplyResponse>;
    submitReadRequest(pool: IndyPool, request: LedgerRequest): Promise<LedgerReadReplyResponse>;
    private signRequest;
    private appendTaa;
    private getTransactionAuthorAgreement;
    private getDidFromPool;
}
export interface PublicDidRequest {
    did: Indy.GetNymResponse;
    pool: IndyPool;
    response: Indy.LedgerReadReplyResponse;
}
