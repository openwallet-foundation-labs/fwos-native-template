import type { IndyPoolConfig } from './IndyPool';
import type { SchemaTemplate, CredentialDefinitionTemplate } from './services';
import type { CredDef, NymRole, Schema } from 'indy-sdk';
import { AgentContext } from '../../agent';
import { AnonCredsCredentialDefinitionRepository } from '../indy/repository/AnonCredsCredentialDefinitionRepository';
import { AnonCredsSchemaRepository } from '../indy/repository/AnonCredsSchemaRepository';
import { LedgerModuleConfig } from './LedgerModuleConfig';
import { IndyLedgerService } from './services';
export declare class LedgerApi {
    config: LedgerModuleConfig;
    private ledgerService;
    private agentContext;
    private anonCredsCredentialDefinitionRepository;
    private anonCredsSchemaRepository;
    constructor(ledgerService: IndyLedgerService, agentContext: AgentContext, anonCredsCredentialDefinitionRepository: AnonCredsCredentialDefinitionRepository, anonCredsSchemaRepository: AnonCredsSchemaRepository, config: LedgerModuleConfig);
    setPools(poolConfigs: IndyPoolConfig[]): void;
    /**
     * Connect to all the ledger pools
     */
    connectToPools(): Promise<void>;
    /**
     * @deprecated use agent.dids.create instead
     */
    registerPublicDid(did: string, verkey: string, alias: string, role?: NymRole): Promise<string>;
    /**
     * @deprecated use agent.dids.resolve instead
     */
    getPublicDid(did: string): Promise<import("indy-sdk").GetNymResponse>;
    getSchema(id: string): Promise<Schema>;
    registerSchema(schema: SchemaTemplate): Promise<Schema>;
    private findBySchemaIdOnLedger;
    private findByCredentialDefinitionIdOnLedger;
    registerCredentialDefinition(credentialDefinitionTemplate: Omit<CredentialDefinitionTemplate, 'signatureType'>): Promise<CredDef>;
    getCredentialDefinition(id: string): Promise<CredDef>;
    getRevocationRegistryDefinition(revocationRegistryDefinitionId: string): Promise<import("./services").ParseRevocationRegistryDefinitionTemplate>;
    getRevocationRegistryDelta(revocationRegistryDefinitionId: string, fromSeconds?: number, toSeconds?: number): Promise<import("./services").ParseRevocationRegistryDeltaTemplate>;
}
