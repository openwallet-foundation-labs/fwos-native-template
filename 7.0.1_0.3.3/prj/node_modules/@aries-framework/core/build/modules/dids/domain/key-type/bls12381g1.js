"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyDidBls12381g1 = exports.getBls12381g1VerificationMethod = void 0;
const crypto_1 = require("../../../../crypto");
const Key_1 = require("../../../../crypto/Key");
const VERIFICATION_METHOD_TYPE_BLS12381G1_KEY_2020 = 'Bls12381G1Key2020';
function getBls12381g1VerificationMethod(did, key) {
    return {
        id: `${did}#${key.fingerprint}`,
        type: VERIFICATION_METHOD_TYPE_BLS12381G1_KEY_2020,
        controller: did,
        publicKeyBase58: key.publicKeyBase58,
    };
}
exports.getBls12381g1VerificationMethod = getBls12381g1VerificationMethod;
exports.keyDidBls12381g1 = {
    supportedVerificationMethodTypes: [VERIFICATION_METHOD_TYPE_BLS12381G1_KEY_2020],
    getVerificationMethods: (did, key) => [getBls12381g1VerificationMethod(did, key)],
    getKeyFromVerificationMethod: (verificationMethod) => {
        if (verificationMethod.type !== VERIFICATION_METHOD_TYPE_BLS12381G1_KEY_2020 ||
            !verificationMethod.publicKeyBase58) {
            throw new Error('Invalid verification method passed');
        }
        return Key_1.Key.fromPublicKeyBase58(verificationMethod.publicKeyBase58, crypto_1.KeyType.Bls12381g1);
    },
};
//# sourceMappingURL=bls12381g1.js.map