"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyDidX25519 = exports.getX25519VerificationMethod = void 0;
const crypto_1 = require("../../../../crypto");
const Key_1 = require("../../../../crypto/Key");
const VERIFICATION_METHOD_TYPE_X25519_KEY_AGREEMENT_KEY_2019 = 'X25519KeyAgreementKey2019';
function getX25519VerificationMethod({ key, id, controller }) {
    return {
        id,
        type: VERIFICATION_METHOD_TYPE_X25519_KEY_AGREEMENT_KEY_2019,
        controller,
        publicKeyBase58: key.publicKeyBase58,
    };
}
exports.getX25519VerificationMethod = getX25519VerificationMethod;
exports.keyDidX25519 = {
    supportedVerificationMethodTypes: [VERIFICATION_METHOD_TYPE_X25519_KEY_AGREEMENT_KEY_2019],
    getVerificationMethods: (did, key) => [
        getX25519VerificationMethod({ id: `${did}#${key.fingerprint}`, key, controller: did }),
    ],
    getKeyFromVerificationMethod: (verificationMethod) => {
        if (verificationMethod.type !== VERIFICATION_METHOD_TYPE_X25519_KEY_AGREEMENT_KEY_2019 ||
            !verificationMethod.publicKeyBase58) {
            throw new Error('Invalid verification method passed');
        }
        return Key_1.Key.fromPublicKeyBase58(verificationMethod.publicKeyBase58, crypto_1.KeyType.X25519);
    },
};
//# sourceMappingURL=x25519.js.map