"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyDidBls12381g2 = exports.getBls12381g2VerificationMethod = exports.VERIFICATION_METHOD_TYPE_BLS12381G2_KEY_2020 = void 0;
const crypto_1 = require("../../../../crypto");
const Key_1 = require("../../../../crypto/Key");
exports.VERIFICATION_METHOD_TYPE_BLS12381G2_KEY_2020 = 'Bls12381G2Key2020';
function getBls12381g2VerificationMethod(did, key) {
    return {
        id: `${did}#${key.fingerprint}`,
        type: exports.VERIFICATION_METHOD_TYPE_BLS12381G2_KEY_2020,
        controller: did,
        publicKeyBase58: key.publicKeyBase58,
    };
}
exports.getBls12381g2VerificationMethod = getBls12381g2VerificationMethod;
exports.keyDidBls12381g2 = {
    supportedVerificationMethodTypes: [exports.VERIFICATION_METHOD_TYPE_BLS12381G2_KEY_2020],
    getVerificationMethods: (did, key) => [getBls12381g2VerificationMethod(did, key)],
    getKeyFromVerificationMethod: (verificationMethod) => {
        if (verificationMethod.type !== exports.VERIFICATION_METHOD_TYPE_BLS12381G2_KEY_2020 ||
            !verificationMethod.publicKeyBase58) {
            throw new Error('Invalid verification method passed');
        }
        return Key_1.Key.fromPublicKeyBase58(verificationMethod.publicKeyBase58, crypto_1.KeyType.Bls12381g2);
    },
};
//# sourceMappingURL=bls12381g2.js.map