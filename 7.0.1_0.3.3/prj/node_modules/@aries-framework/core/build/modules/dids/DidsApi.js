"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidsApi = void 0;
const agent_1 = require("../../agent");
const plugins_1 = require("../../plugins");
const DidsModuleConfig_1 = require("./DidsModuleConfig");
const repository_1 = require("./repository");
const services_1 = require("./services");
let DidsApi = class DidsApi {
    constructor(didResolverService, didRegistrarService, didRepository, agentContext, config) {
        this.didResolverService = didResolverService;
        this.didRegistrarService = didRegistrarService;
        this.didRepository = didRepository;
        this.agentContext = agentContext;
        this.config = config;
    }
    /**
     * Resolve a did to a did document.
     *
     * Follows the interface as defined in https://w3c-ccg.github.io/did-resolution/
     */
    resolve(didUrl, options) {
        return this.didResolverService.resolve(this.agentContext, didUrl, options);
    }
    /**
     * Create, register and store a did and did document.
     *
     * Follows the interface as defined in https://identity.foundation/did-registration
     */
    create(options) {
        return this.didRegistrarService.create(this.agentContext, options);
    }
    /**
     * Update an existing did document.
     *
     * Follows the interface as defined in https://identity.foundation/did-registration
     */
    update(options) {
        return this.didRegistrarService.update(this.agentContext, options);
    }
    /**
     * Deactivate an existing did.
     *
     * Follows the interface as defined in https://identity.foundation/did-registration
     */
    deactivate(options) {
        return this.didRegistrarService.deactivate(this.agentContext, options);
    }
    /**
     * Resolve a did to a did document. This won't return the associated metadata as defined
     * in the did resolution specification, and will throw an error if the did document could not
     * be resolved.
     */
    resolveDidDocument(didUrl) {
        return this.didResolverService.resolveDidDocument(this.agentContext, didUrl);
    }
    /**
     * Get a list of all dids created by the agent. This will return a list of {@link DidRecord} objects.
     * Each document will have an id property with the value of the did. Optionally, it will contain a did document,
     * but this is only for documents that can't be resolved from the did itself or remotely.
     *
     * You can call `${@link DidsModule.resolve} to resolve the did document based on the did itself.
     */
    getCreatedDids({ method } = {}) {
        return this.didRepository.getCreatedDids(this.agentContext, { method });
    }
};
DidsApi = __decorate([
    (0, plugins_1.injectable)(),
    __metadata("design:paramtypes", [services_1.DidResolverService,
        services_1.DidRegistrarService,
        repository_1.DidRepository,
        agent_1.AgentContext,
        DidsModuleConfig_1.DidsModuleConfig])
], DidsApi);
exports.DidsApi = DidsApi;
//# sourceMappingURL=DidsApi.js.map