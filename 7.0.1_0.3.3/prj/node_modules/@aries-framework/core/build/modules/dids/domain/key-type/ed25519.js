"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertPublicKeyToX25519 = exports.keyDidEd25519 = exports.getEd25519VerificationMethod = exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2020 = exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018 = void 0;
const ed25519_1 = require("@stablelib/ed25519");
Object.defineProperty(exports, "convertPublicKeyToX25519", { enumerable: true, get: function () { return ed25519_1.convertPublicKeyToX25519; } });
const crypto_1 = require("../../../../crypto");
const Key_1 = require("../../../../crypto/Key");
exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018 = 'Ed25519VerificationKey2018';
exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2020 = 'Ed25519VerificationKey2020';
function getEd25519VerificationMethod({ key, id, controller }) {
    return {
        id,
        type: exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018,
        controller,
        publicKeyBase58: key.publicKeyBase58,
    };
}
exports.getEd25519VerificationMethod = getEd25519VerificationMethod;
exports.keyDidEd25519 = {
    supportedVerificationMethodTypes: [
        exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018,
        exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2020,
    ],
    getVerificationMethods: (did, key) => [
        getEd25519VerificationMethod({ id: `${did}#${key.fingerprint}`, key, controller: did }),
    ],
    getKeyFromVerificationMethod: (verificationMethod) => {
        if (verificationMethod.type === exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2018 &&
            verificationMethod.publicKeyBase58) {
            return Key_1.Key.fromPublicKeyBase58(verificationMethod.publicKeyBase58, crypto_1.KeyType.Ed25519);
        }
        if (verificationMethod.type === exports.VERIFICATION_METHOD_TYPE_ED25519_VERIFICATION_KEY_2020 &&
            verificationMethod.publicKeyMultibase) {
            return Key_1.Key.fromFingerprint(verificationMethod.publicKeyMultibase);
        }
        throw new Error('Invalid verification method passed');
    },
};
//# sourceMappingURL=ed25519.js.map