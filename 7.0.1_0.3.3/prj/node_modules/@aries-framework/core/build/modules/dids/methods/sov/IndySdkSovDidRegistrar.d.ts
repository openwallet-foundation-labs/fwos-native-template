import type { AgentContext } from '../../../../agent';
import type { IndyEndpointAttrib, IndyPool } from '../../../ledger';
import type { DidRegistrar } from '../../domain/DidRegistrar';
import type { DidCreateOptions, DidCreateResult, DidDeactivateResult, DidUpdateResult } from '../../types';
import type * as Indy from 'indy-sdk';
export declare class IndySdkSovDidRegistrar implements DidRegistrar {
    readonly supportedMethods: string[];
    create(agentContext: AgentContext, options: SovDidCreateOptions): Promise<DidCreateResult>;
    update(): Promise<DidUpdateResult>;
    deactivate(): Promise<DidDeactivateResult>;
    registerPublicDid(agentContext: AgentContext, submitterDid: string, targetDid: string, verkey: string, alias: string, pool: IndyPool, role?: Indy.NymRole): Promise<string>;
    setEndpointsForDid(agentContext: AgentContext, did: string, endpoints: IndyEndpointAttrib, pool: IndyPool): Promise<void>;
}
export interface SovDidCreateOptions extends DidCreateOptions {
    method: 'sov';
    did?: undefined;
    didDocument?: never;
    options: {
        alias: string;
        role?: Indy.NymRole;
        endpoints?: IndyEndpointAttrib;
        indyNamespace?: string;
        submitterDid: string;
    };
    secret?: {
        seed?: string;
    };
}
export type IndyDidUpdateOptions = never;
export type IndyDidDeactivateOptions = never;
