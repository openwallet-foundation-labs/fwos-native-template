"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2PresentationHandler = void 0;
const models_1 = require("../../../../../agent/models");
const messages_1 = require("../messages");
class V2PresentationHandler {
    constructor(proofService, agentConfig, proofResponseCoordinator, didCommMessageRepository) {
        this.supportedMessages = [messages_1.V2PresentationMessage];
        this.proofService = proofService;
        this.agentConfig = agentConfig;
        this.proofResponseCoordinator = proofResponseCoordinator;
        this.didCommMessageRepository = didCommMessageRepository;
    }
    async handle(messageContext) {
        const proofRecord = await this.proofService.processPresentation(messageContext);
        const shouldAutoRespond = await this.proofResponseCoordinator.shouldAutoRespondToPresentation(messageContext.agentContext, proofRecord);
        if (shouldAutoRespond) {
            return await this.createAck(proofRecord, messageContext);
        }
    }
    async createAck(record, messageContext) {
        this.agentConfig.logger.info(`Automatically sending acknowledgement with autoAccept on ${this.agentConfig.autoAcceptProofs}`);
        const { message, proofRecord } = await this.proofService.createAck(messageContext.agentContext, {
            proofRecord: record,
        });
        const requestMessage = await this.didCommMessageRepository.findAgentMessage(messageContext.agentContext, {
            associatedRecordId: proofRecord.id,
            messageClass: messages_1.V2RequestPresentationMessage,
        });
        const presentationMessage = await this.didCommMessageRepository.findAgentMessage(messageContext.agentContext, {
            associatedRecordId: proofRecord.id,
            messageClass: messages_1.V2PresentationMessage,
        });
        if (messageContext.connection) {
            return new models_1.OutboundMessageContext(message, {
                agentContext: messageContext.agentContext,
                connection: messageContext.connection,
                associatedRecord: proofRecord,
            });
        }
        else if ((requestMessage === null || requestMessage === void 0 ? void 0 : requestMessage.service) && (presentationMessage === null || presentationMessage === void 0 ? void 0 : presentationMessage.service)) {
            const recipientService = presentationMessage === null || presentationMessage === void 0 ? void 0 : presentationMessage.service;
            const ourService = requestMessage === null || requestMessage === void 0 ? void 0 : requestMessage.service;
            return new models_1.OutboundMessageContext(message, {
                agentContext: messageContext.agentContext,
                serviceParams: {
                    service: recipientService.resolvedDidCommService,
                    senderKey: ourService.resolvedDidCommService.recipientKeys[0],
                },
            });
        }
        this.agentConfig.logger.error(`Could not automatically create presentation ack`);
    }
}
exports.V2PresentationHandler = V2PresentationHandler;
//# sourceMappingURL=V2PresentationHandler.js.map