import type { ProofAttachmentFormat } from '../../../formats/models/ProofAttachmentFormat';
import type { IndyProof } from 'indy-sdk';
import { AgentMessage } from '../../../../../agent/AgentMessage';
import { Attachment } from '../../../../../decorators/attachment/Attachment';
export declare const INDY_PROOF_ATTACHMENT_ID = "libindy-presentation-0";
export interface PresentationOptions {
    id?: string;
    comment?: string;
    presentationAttachments: Attachment[];
    attachments?: Attachment[];
}
/**
 * Presentation Message part of Present Proof Protocol used as a response to a {@link PresentationRequestMessage | Presentation Request Message} from prover to verifier.
 * Contains signed presentations.
 *
 * @see https://github.com/hyperledger/aries-rfcs/blob/master/features/0037-present-proof/README.md#presentation
 */
export declare class V1PresentationMessage extends AgentMessage {
    constructor(options: PresentationOptions);
    readonly type: string;
    static readonly type: import("../../../../../utils/messageType").ParsedMessageType;
    /**
     *  Provides some human readable information about this request for a presentation.
     */
    comment?: string;
    /**
     * An array of attachments containing the presentation in the requested format(s).
     */
    presentationAttachments: Attachment[];
    getAttachmentFormats(): ProofAttachmentFormat[];
    get indyAttachment(): Attachment | null;
    get indyProof(): IndyProof | null;
}
