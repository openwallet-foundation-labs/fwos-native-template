"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2RequestPresentationHandler = void 0;
const models_1 = require("../../../../../agent/models");
const ServiceDecorator_1 = require("../../../../../decorators/service/ServiceDecorator");
const storage_1 = require("../../../../../storage");
const V2RequestPresentationMessage_1 = require("../messages/V2RequestPresentationMessage");
class V2RequestPresentationHandler {
    constructor(proofService, agentConfig, proofResponseCoordinator, mediationRecipientService, didCommMessageRepository, routingService) {
        this.supportedMessages = [V2RequestPresentationMessage_1.V2RequestPresentationMessage];
        this.proofService = proofService;
        this.agentConfig = agentConfig;
        this.proofResponseCoordinator = proofResponseCoordinator;
        this.mediationRecipientService = mediationRecipientService;
        this.didCommMessageRepository = didCommMessageRepository;
        this.routingService = routingService;
    }
    async handle(messageContext) {
        const proofRecord = await this.proofService.processRequest(messageContext);
        const shouldAutoRespond = await this.proofResponseCoordinator.shouldAutoRespondToRequest(messageContext.agentContext, proofRecord);
        if (shouldAutoRespond) {
            return await this.createPresentation(proofRecord, messageContext);
        }
    }
    async createPresentation(record, messageContext) {
        const requestMessage = await this.didCommMessageRepository.getAgentMessage(messageContext.agentContext, {
            associatedRecordId: record.id,
            messageClass: V2RequestPresentationMessage_1.V2RequestPresentationMessage,
        });
        this.agentConfig.logger.info(`Automatically sending presentation with autoAccept on ${this.agentConfig.autoAcceptProofs}`);
        const retrievedCredentials = await this.proofService.getRequestedCredentialsForProofRequest(messageContext.agentContext, {
            proofRecord: record,
            config: {
                filterByPresentationPreview: false,
            },
        });
        const requestedCredentials = await this.proofService.autoSelectCredentialsForProofRequest(retrievedCredentials);
        const { message, proofRecord } = await this.proofService.createPresentation(messageContext.agentContext, {
            proofRecord: record,
            proofFormats: requestedCredentials.proofFormats,
        });
        if (messageContext.connection) {
            return new models_1.OutboundMessageContext(message, {
                agentContext: messageContext.agentContext,
                connection: messageContext.connection,
                associatedRecord: proofRecord,
            });
        }
        else if (requestMessage.service) {
            const routing = await this.routingService.getRouting(messageContext.agentContext);
            message.service = new ServiceDecorator_1.ServiceDecorator({
                serviceEndpoint: routing.endpoints[0],
                recipientKeys: [routing.recipientKey.publicKeyBase58],
                routingKeys: routing.routingKeys.map((key) => key.publicKeyBase58),
            });
            const recipientService = requestMessage.service;
            await this.didCommMessageRepository.saveOrUpdateAgentMessage(messageContext.agentContext, {
                agentMessage: message,
                associatedRecordId: proofRecord.id,
                role: storage_1.DidCommMessageRole.Sender,
            });
            return new models_1.OutboundMessageContext(message, {
                agentContext: messageContext.agentContext,
                serviceParams: {
                    service: recipientService.resolvedDidCommService,
                    senderKey: message.service.resolvedDidCommService.recipientKeys[0],
                },
            });
        }
        this.agentConfig.logger.error(`Could not automatically create presentation`);
    }
}
exports.V2RequestPresentationHandler = V2RequestPresentationHandler;
//# sourceMappingURL=V2RequestPresentationHandler.js.map