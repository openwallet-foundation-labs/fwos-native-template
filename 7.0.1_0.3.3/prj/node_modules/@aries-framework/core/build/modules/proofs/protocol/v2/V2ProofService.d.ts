import type { AgentContext } from '../../../../agent';
import type { AgentMessage } from '../../../../agent/AgentMessage';
import type { Dispatcher } from '../../../../agent/Dispatcher';
import type { InboundMessageContext } from '../../../../agent/models/InboundMessageContext';
import type { MediationRecipientService } from '../../../routing/services/MediationRecipientService';
import type { RoutingService } from '../../../routing/services/RoutingService';
import type { ProofResponseCoordinator } from '../../ProofResponseCoordinator';
import type { ProofFormat } from '../../formats/ProofFormat';
import type { CreateProblemReportOptions } from '../../formats/models/ProofFormatServiceOptions';
import type { CreateAckOptions, CreatePresentationOptions, CreateProofRequestFromProposalOptions, CreateProposalAsResponseOptions, CreateProposalOptions, CreateRequestAsResponseOptions, CreateRequestOptions, FormatRequestedCredentialReturn, FormatRetrievedCredentialOptions, GetFormatDataReturn, GetRequestedCredentialsForProofRequestOptions, ProofRequestFromProposalOptions } from '../../models/ProofServiceOptions';
import { AgentConfig } from '../../../../agent/AgentConfig';
import { EventEmitter } from '../../../../agent/EventEmitter';
import { DidCommMessageRepository } from '../../../../storage';
import { Wallet } from '../../../../wallet/Wallet';
import { ConnectionService } from '../../../connections';
import { ProofService } from '../../ProofService';
import { IndyProofFormatService } from '../../formats/indy/IndyProofFormatService';
import { ProofExchangeRecord, ProofRepository } from '../../repository';
import { V2PresentationAckMessage } from './messages';
import { V2PresentationMessage } from './messages/V2PresentationMessage';
import { V2PresentationProblemReportMessage } from './messages/V2PresentationProblemReportMessage';
import { V2ProposalPresentationMessage } from './messages/V2ProposalPresentationMessage';
import { V2RequestPresentationMessage } from './messages/V2RequestPresentationMessage';
export declare class V2ProofService<PFs extends ProofFormat[] = ProofFormat[]> extends ProofService<PFs> {
    private formatServiceMap;
    constructor(agentConfig: AgentConfig, connectionService: ConnectionService, proofRepository: ProofRepository, didCommMessageRepository: DidCommMessageRepository, eventEmitter: EventEmitter, indyProofFormatService: IndyProofFormatService, wallet: Wallet);
    /**
     * The version of the present proof protocol this service supports
     */
    readonly version: "v2";
    createProposal(agentContext: AgentContext, options: CreateProposalOptions<PFs>): Promise<{
        proofRecord: ProofExchangeRecord;
        message: AgentMessage;
    }>;
    createProposalAsResponse(agentContext: AgentContext, options: CreateProposalAsResponseOptions<PFs>): Promise<{
        proofRecord: ProofExchangeRecord;
        message: AgentMessage;
    }>;
    processProposal(messageContext: InboundMessageContext<V2ProposalPresentationMessage>): Promise<ProofExchangeRecord>;
    createRequest(agentContext: AgentContext, options: CreateRequestOptions<PFs>): Promise<{
        proofRecord: ProofExchangeRecord;
        message: AgentMessage;
    }>;
    createRequestAsResponse(agentContext: AgentContext, options: CreateRequestAsResponseOptions<PFs>): Promise<{
        proofRecord: ProofExchangeRecord;
        message: AgentMessage;
    }>;
    processRequest(messageContext: InboundMessageContext<V2RequestPresentationMessage>): Promise<ProofExchangeRecord>;
    createPresentation(agentContext: AgentContext, options: CreatePresentationOptions<PFs>): Promise<{
        proofRecord: ProofExchangeRecord;
        message: AgentMessage;
    }>;
    processPresentation(messageContext: InboundMessageContext<V2PresentationMessage>): Promise<ProofExchangeRecord>;
    createAck(agentContext: AgentContext, options: CreateAckOptions): Promise<{
        proofRecord: ProofExchangeRecord;
        message: AgentMessage;
    }>;
    processAck(messageContext: InboundMessageContext<V2PresentationAckMessage>): Promise<ProofExchangeRecord>;
    createProblemReport(agentContext: AgentContext, options: CreateProblemReportOptions): Promise<{
        proofRecord: ProofExchangeRecord;
        message: AgentMessage;
    }>;
    processProblemReport(messageContext: InboundMessageContext<V2PresentationProblemReportMessage>): Promise<ProofExchangeRecord>;
    createProofRequestFromProposal(agentContext: AgentContext, options: CreateProofRequestFromProposalOptions): Promise<ProofRequestFromProposalOptions<PFs>>;
    shouldAutoRespondToProposal(agentContext: AgentContext, proofRecord: ProofExchangeRecord): Promise<boolean>;
    shouldAutoRespondToRequest(agentContext: AgentContext, proofRecord: ProofExchangeRecord): Promise<boolean>;
    shouldAutoRespondToPresentation(agentContext: AgentContext, proofRecord: ProofExchangeRecord): Promise<boolean>;
    findRequestMessage(agentContext: AgentContext, proofRecordId: string): Promise<V2RequestPresentationMessage | null>;
    findPresentationMessage(agentContext: AgentContext, proofRecordId: string): Promise<V2PresentationMessage | null>;
    findProposalMessage(agentContext: AgentContext, proofRecordId: string): Promise<V2ProposalPresentationMessage | null>;
    getFormatData(agentContext: AgentContext, proofRecordId: string): Promise<GetFormatDataReturn>;
    private getFormatServicesFromMessage;
    private getAttachmentForService;
    private getAttachmentIdForService;
    getRequestedCredentialsForProofRequest(agentContext: AgentContext, options: GetRequestedCredentialsForProofRequestOptions): Promise<FormatRetrievedCredentialOptions<PFs>>;
    autoSelectCredentialsForProofRequest(options: FormatRetrievedCredentialOptions<PFs>): Promise<FormatRequestedCredentialReturn<PFs>>;
    registerMessageHandlers(dispatcher: Dispatcher, agentConfig: AgentConfig, proofResponseCoordinator: ProofResponseCoordinator, mediationRecipientService: MediationRecipientService, routingService: RoutingService): void;
    private getFormatServiceForFormat;
}
