export declare class AttributeValue {
    constructor(options: AttributeValue);
    name: string;
    value: string;
}
export declare class AttributeFilter {
    constructor(options: AttributeFilter);
    schemaId?: string;
    schemaIssuerDid?: string;
    schemaName?: string;
    schemaVersion?: string;
    issuerDid?: string;
    credentialDefinitionId?: string;
    attributeValue?: AttributeValue;
}
/**
 * Decorator that transforms attribute filter to corresponding class instances.
 * Needed for transformation of attribute value filter.
 *
 * Transforms attribute value between these formats:
 *
 * JSON:
 * ```json
 * {
 *  "attr::test_prop::value": "test_value"
 * }
 * ```
 *
 * Class:
 * ```json
 * {
 *  "attributeValue": {
 *    "name": "test_props",
 *    "value": "test_value"
 *  }
 * }
 * ```
 *
 * @example
 * class Example {
 *   AttributeFilterTransformer()
 *   public attributeFilter?: AttributeFilter;
 * }
 *
 * @see https://github.com/hyperledger/aries-framework-dotnet/blob/a18bef91e5b9e4a1892818df7408e2383c642dfa/src/Hyperledger.Aries/Features/PresentProof/Models/AttributeFilterConverter.cs
 */
export declare function AttributeFilterTransformer(): PropertyDecorator;
