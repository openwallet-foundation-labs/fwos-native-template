import type { ProofExchangeRecord } from './repository';
import type { AgentContext } from '../../agent/context/AgentContext';
import { ProofService } from './ProofService';
/**
 * This class handles all the automation with all the messages in the present proof protocol
 * Every function returns `true` if it should automate the flow and `false` if not
 */
export declare class ProofResponseCoordinator {
    private proofService;
    constructor(proofService: ProofService);
    /**
     * Returns the proof auto accept config based on priority:
     *	- The record config takes first priority
     *	- Otherwise the agent config
     *	- Otherwise {@link AutoAcceptProof.Never} is returned
     */
    private static composeAutoAccept;
    /**
     * Checks whether it should automatically respond to a proposal
     */
    shouldAutoRespondToProposal(agentContext: AgentContext, proofRecord: ProofExchangeRecord): Promise<boolean>;
    /**
     * Checks whether it should automatically respond to a request
     */
    shouldAutoRespondToRequest(agentContext: AgentContext, proofRecord: ProofExchangeRecord): Promise<boolean>;
    /**
     * Checks whether it should automatically respond to a presentation of proof
     */
    shouldAutoRespondToPresentation(agentContext: AgentContext, proofRecord: ProofExchangeRecord): Promise<boolean>;
}
