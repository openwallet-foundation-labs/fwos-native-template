import type { AgentConfig } from '../../../../../agent/AgentConfig';
import type { MessageHandler, MessageHandlerInboundMessage } from '../../../../../agent/MessageHandler';
import type { DidCommMessageRepository } from '../../../../../storage/didcomm/DidCommMessageRepository';
import type { ProofResponseCoordinator } from '../../../ProofResponseCoordinator';
import type { V1ProofService } from '../V1ProofService';
import { OutboundMessageContext } from '../../../../../agent/models';
import { V1ProposePresentationMessage } from '../messages';
export declare class V1ProposePresentationHandler implements MessageHandler {
    private proofService;
    private agentConfig;
    private didCommMessageRepository;
    private proofResponseCoordinator;
    supportedMessages: (typeof V1ProposePresentationMessage)[];
    constructor(proofService: V1ProofService, agentConfig: AgentConfig, proofResponseCoordinator: ProofResponseCoordinator, didCommMessageRepository: DidCommMessageRepository);
    handle(messageContext: MessageHandlerInboundMessage<V1ProposePresentationHandler>): Promise<OutboundMessageContext<import("../../../../..").AgentMessage> | undefined>;
    private createRequest;
}
