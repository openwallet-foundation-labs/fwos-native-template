import type { AgentConfig } from '../../../../../agent/AgentConfig';
import type { MessageHandler, MessageHandlerInboundMessage } from '../../../../../agent/MessageHandler';
import type { DidCommMessageRepository } from '../../../../../storage';
import type { ProofResponseCoordinator } from '../../../ProofResponseCoordinator';
import type { ProofFormat } from '../../../formats/ProofFormat';
import type { V2ProofService } from '../V2ProofService';
import { OutboundMessageContext } from '../../../../../agent/models';
import { V2ProposalPresentationMessage } from '../messages/V2ProposalPresentationMessage';
export declare class V2ProposePresentationHandler<PFs extends ProofFormat[] = ProofFormat[]> implements MessageHandler {
    private proofService;
    private agentConfig;
    private didCommMessageRepository;
    private proofResponseCoordinator;
    supportedMessages: (typeof V2ProposalPresentationMessage)[];
    constructor(proofService: V2ProofService, agentConfig: AgentConfig, didCommMessageRepository: DidCommMessageRepository, proofResponseCoordinator: ProofResponseCoordinator);
    handle(messageContext: MessageHandlerInboundMessage<V2ProposePresentationHandler>): Promise<OutboundMessageContext<import("../../../../..").AgentMessage> | undefined>;
    private createRequest;
}
