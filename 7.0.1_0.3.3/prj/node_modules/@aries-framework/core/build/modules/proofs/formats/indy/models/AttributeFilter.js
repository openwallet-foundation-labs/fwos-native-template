"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeFilterTransformer = exports.AttributeFilter = exports.AttributeValue = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const regex_1 = require("../../../../../utils/regex");
class AttributeValue {
    constructor(options) {
        if (options) {
            this.name = options.name;
            this.value = options.value;
        }
    }
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], AttributeValue.prototype, "name", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], AttributeValue.prototype, "value", void 0);
exports.AttributeValue = AttributeValue;
class AttributeFilter {
    constructor(options) {
        if (options) {
            this.schemaId = options.schemaId;
            this.schemaIssuerDid = options.schemaIssuerDid;
            this.schemaName = options.schemaName;
            this.schemaVersion = options.schemaVersion;
            this.issuerDid = options.issuerDid;
            this.credentialDefinitionId = options.credentialDefinitionId;
            this.attributeValue = options.attributeValue;
        }
    }
}
__decorate([
    (0, class_transformer_1.Expose)({ name: 'schema_id' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Matches)(regex_1.schemaIdRegex),
    __metadata("design:type", String)
], AttributeFilter.prototype, "schemaId", void 0);
__decorate([
    (0, class_transformer_1.Expose)({ name: 'schema_issuer_did' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Matches)(regex_1.indyDidRegex),
    __metadata("design:type", String)
], AttributeFilter.prototype, "schemaIssuerDid", void 0);
__decorate([
    (0, class_transformer_1.Expose)({ name: 'schema_name' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], AttributeFilter.prototype, "schemaName", void 0);
__decorate([
    (0, class_transformer_1.Expose)({ name: 'schema_version' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Matches)(regex_1.schemaVersionRegex, {
        message: 'Version must be X.X or X.X.X',
    }),
    __metadata("design:type", String)
], AttributeFilter.prototype, "schemaVersion", void 0);
__decorate([
    (0, class_transformer_1.Expose)({ name: 'issuer_did' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Matches)(regex_1.indyDidRegex),
    __metadata("design:type", String)
], AttributeFilter.prototype, "issuerDid", void 0);
__decorate([
    (0, class_transformer_1.Expose)({ name: 'cred_def_id' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Matches)(regex_1.credDefIdRegex),
    __metadata("design:type", String)
], AttributeFilter.prototype, "credentialDefinitionId", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Type)(() => AttributeValue),
    (0, class_validator_1.ValidateNested)(),
    (0, class_validator_1.IsInstance)(AttributeValue),
    __metadata("design:type", AttributeValue)
], AttributeFilter.prototype, "attributeValue", void 0);
exports.AttributeFilter = AttributeFilter;
/**
 * Decorator that transforms attribute filter to corresponding class instances.
 * Needed for transformation of attribute value filter.
 *
 * Transforms attribute value between these formats:
 *
 * JSON:
 * ```json
 * {
 *  "attr::test_prop::value": "test_value"
 * }
 * ```
 *
 * Class:
 * ```json
 * {
 *  "attributeValue": {
 *    "name": "test_props",
 *    "value": "test_value"
 *  }
 * }
 * ```
 *
 * @example
 * class Example {
 *   AttributeFilterTransformer()
 *   public attributeFilter?: AttributeFilter;
 * }
 *
 * @see https://github.com/hyperledger/aries-framework-dotnet/blob/a18bef91e5b9e4a1892818df7408e2383c642dfa/src/Hyperledger.Aries/Features/PresentProof/Models/AttributeFilterConverter.cs
 */
function AttributeFilterTransformer() {
    return (0, class_transformer_1.Transform)(({ value: attributeFilter, type: transformationType }) => {
        switch (transformationType) {
            case class_transformer_1.TransformationType.CLASS_TO_PLAIN:
                if (attributeFilter.attributeValue) {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    attributeFilter[`attr::${attributeFilter.attributeValue.name}::value`] = attributeFilter.attributeValue.value;
                    delete attributeFilter.attributeValue;
                }
                return attributeFilter;
            case class_transformer_1.TransformationType.PLAIN_TO_CLASS:
                for (const [key, value] of Object.entries(attributeFilter)) {
                    const match = new RegExp('^attr::([^:]+)::(value)$').exec(key);
                    if (match) {
                        const attributeValue = new AttributeValue({
                            name: match[1],
                            value: value,
                        });
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        delete attributeFilter[key];
                        attributeFilter.attributeValue = attributeValue;
                        return attributeFilter;
                    }
                }
                return attributeFilter;
            default:
                return attributeFilter;
        }
    });
}
exports.AttributeFilterTransformer = AttributeFilterTransformer;
//# sourceMappingURL=AttributeFilter.js.map