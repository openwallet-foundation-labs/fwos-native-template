import type { AgentConfig } from '../../../../../agent/AgentConfig';
import type { MessageHandler, MessageHandlerInboundMessage } from '../../../../../agent/MessageHandler';
import type { DidCommMessageRepository } from '../../../../../storage/didcomm/DidCommMessageRepository';
import type { MediationRecipientService, RoutingService } from '../../../../routing';
import type { ProofResponseCoordinator } from '../../../ProofResponseCoordinator';
import type { V1ProofService } from '../V1ProofService';
import { OutboundMessageContext } from '../../../../../agent/models';
import { V1RequestPresentationMessage } from '../messages';
export declare class V1RequestPresentationHandler implements MessageHandler {
    private proofService;
    private agentConfig;
    private proofResponseCoordinator;
    private mediationRecipientService;
    private didCommMessageRepository;
    private routingService;
    supportedMessages: (typeof V1RequestPresentationMessage)[];
    constructor(proofService: V1ProofService, agentConfig: AgentConfig, proofResponseCoordinator: ProofResponseCoordinator, mediationRecipientService: MediationRecipientService, didCommMessageRepository: DidCommMessageRepository, routingService: RoutingService);
    handle(messageContext: MessageHandlerInboundMessage<V1RequestPresentationHandler>): Promise<OutboundMessageContext<import("../../../../..").AgentMessage> | undefined>;
    private createPresentation;
}
