import type { ProofService } from './ProofService';
import type { AcceptProofPresentationOptions, AcceptProofProposalOptions, CreateProofRequestOptions, FindProofPresentationMessageReturn, FindProofProposalMessageReturn, FindProofRequestMessageReturn, ProposeProofOptions, RequestProofOptions, NegotiateRequestOptions, NegotiateProposalOptions } from './ProofsApiOptions';
import type { ProofFormat } from './formats/ProofFormat';
import type { IndyProofFormat } from './formats/indy/IndyProofFormat';
import type { AutoSelectCredentialsForProofRequestOptions } from './models/ModuleOptions';
import type { FormatRequestedCredentialReturn, FormatRetrievedCredentialOptions, DeleteProofOptions, GetFormatDataReturn } from './models/ProofServiceOptions';
import type { ProofExchangeRecord } from './repository/ProofExchangeRecord';
import type { AgentMessage } from '../../agent/AgentMessage';
import type { Query } from '../../storage/StorageService';
import { AgentConfig } from '../../agent/AgentConfig';
import { Dispatcher } from '../../agent/Dispatcher';
import { MessageSender } from '../../agent/MessageSender';
import { AgentContext } from '../../agent/context/AgentContext';
import { Logger } from '../../logger';
import { ConnectionService } from '../connections/services/ConnectionService';
import { MediationRecipientService } from '../routing/services/MediationRecipientService';
import { RoutingService } from '../routing/services/RoutingService';
import { V1ProofService } from './protocol/v1/V1ProofService';
import { V2ProofService } from './protocol/v2/V2ProofService';
import { ProofRepository } from './repository/ProofRepository';
export interface ProofsApi<PFs extends ProofFormat[], PSs extends ProofService<PFs>[]> {
    proposeProof(options: ProposeProofOptions<PFs, PSs>): Promise<ProofExchangeRecord>;
    acceptProposal(options: AcceptProofProposalOptions): Promise<ProofExchangeRecord>;
    negotiateProposal(options: NegotiateProposalOptions<PFs>): Promise<ProofExchangeRecord>;
    requestProof(options: RequestProofOptions<PFs, PSs>): Promise<ProofExchangeRecord>;
    acceptRequest(options: AcceptProofPresentationOptions<PFs>): Promise<ProofExchangeRecord>;
    declineRequest(proofRecordId: string): Promise<ProofExchangeRecord>;
    negotiateRequest(options: NegotiateRequestOptions<PFs>): Promise<ProofExchangeRecord>;
    acceptPresentation(proofRecordId: string): Promise<ProofExchangeRecord>;
    createRequest(options: CreateProofRequestOptions<PFs, PSs>): Promise<{
        message: AgentMessage;
        proofRecord: ProofExchangeRecord;
    }>;
    autoSelectCredentialsForProofRequest(options: AutoSelectCredentialsForProofRequestOptions): Promise<FormatRequestedCredentialReturn<PFs>>;
    getRequestedCredentialsForProofRequest(options: AutoSelectCredentialsForProofRequestOptions): Promise<FormatRetrievedCredentialOptions<PFs>>;
    sendProblemReport(proofRecordId: string, message: string): Promise<ProofExchangeRecord>;
    getAll(): Promise<ProofExchangeRecord[]>;
    findAllByQuery(query: Query<ProofExchangeRecord>): Promise<ProofExchangeRecord[]>;
    getById(proofRecordId: string): Promise<ProofExchangeRecord>;
    findById(proofRecordId: string): Promise<ProofExchangeRecord | null>;
    deleteById(proofId: string, options?: DeleteProofOptions): Promise<void>;
    update(proofRecord: ProofExchangeRecord): Promise<void>;
    getFormatData(proofRecordId: string): Promise<GetFormatDataReturn<PFs>>;
    findProposalMessage(proofRecordId: string): Promise<FindProofProposalMessageReturn<PSs>>;
    findRequestMessage(proofRecordId: string): Promise<FindProofRequestMessageReturn<PSs>>;
    findPresentationMessage(proofRecordId: string): Promise<FindProofPresentationMessageReturn<PSs>>;
}
export declare class ProofsApi<PFs extends ProofFormat[] = [IndyProofFormat], PSs extends ProofService<PFs>[] = [V1ProofService, V2ProofService<PFs>]> implements ProofsApi<PFs, PSs> {
    private connectionService;
    private messageSender;
    private routingService;
    private proofRepository;
    private agentContext;
    private agentConfig;
    private logger;
    private serviceMap;
    constructor(dispatcher: Dispatcher, mediationRecipientService: MediationRecipientService, messageSender: MessageSender, connectionService: ConnectionService, agentContext: AgentContext, agentConfig: AgentConfig, routingService: RoutingService, logger: Logger, proofRepository: ProofRepository, v1Service: V1ProofService, v2Service: V2ProofService<PFs>);
    getService<PVT extends ProofService['version']>(protocolVersion: PVT): ProofService<PFs>;
    /**
     * Retrieve a proof record by connection id and thread id
     *
     * @param connectionId The connection id
     * @param threadId The thread id
     * @throws {RecordNotFoundError} If no record is found
     * @throws {RecordDuplicateError} If multiple records are found
     * @returns The proof record
     */
    getByThreadAndConnectionId(threadId: string, connectionId?: string): Promise<ProofExchangeRecord>;
    /**
     * Retrieve proof records by connection id and parent thread id
     *
     * @param connectionId The connection id
     * @param parentThreadId The parent thread id
     * @returns List containing all proof records matching the given query
     */
    getByParentThreadAndConnectionId(parentThreadId: string, connectionId?: string): Promise<ProofExchangeRecord[]>;
    private registerMessageHandlers;
}
