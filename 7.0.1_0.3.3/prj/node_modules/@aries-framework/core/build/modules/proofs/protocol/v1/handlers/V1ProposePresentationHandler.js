"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1ProposePresentationHandler = void 0;
const models_1 = require("../../../../../agent/models");
const error_1 = require("../../../../../error");
const messages_1 = require("../messages");
class V1ProposePresentationHandler {
    constructor(proofService, agentConfig, proofResponseCoordinator, didCommMessageRepository) {
        this.supportedMessages = [messages_1.V1ProposePresentationMessage];
        this.proofService = proofService;
        this.agentConfig = agentConfig;
        this.proofResponseCoordinator = proofResponseCoordinator;
        this.didCommMessageRepository = didCommMessageRepository;
    }
    async handle(messageContext) {
        const proofRecord = await this.proofService.processProposal(messageContext);
        const shouldAutoRespond = await this.proofResponseCoordinator.shouldAutoRespondToProposal(messageContext.agentContext, proofRecord);
        if (shouldAutoRespond) {
            return await this.createRequest(proofRecord, messageContext);
        }
    }
    async createRequest(proofRecord, messageContext) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.agentConfig.logger.info(`Automatically sending request with autoAccept on ${this.agentConfig.autoAcceptProofs}`);
        if (!messageContext.connection) {
            this.agentConfig.logger.error('No connection on the messageContext');
            throw new error_1.AriesFrameworkError('No connection on the messageContext');
        }
        const proposalMessage = await this.didCommMessageRepository.getAgentMessage(messageContext.agentContext, {
            associatedRecordId: proofRecord.id,
            messageClass: messages_1.V1ProposePresentationMessage,
        });
        if (!proposalMessage) {
            this.agentConfig.logger.error(`Proof record with id ${proofRecord.id} is missing required credential proposal`);
            throw new error_1.AriesFrameworkError(`Proof record with id ${proofRecord.id} is missing required credential proposal`);
        }
        const proofRequestFromProposalOptions = {
            name: 'proof-request',
            version: '1.0',
            nonce: await messageContext.agentContext.wallet.generateNonce(),
            proofRecord,
        };
        const proofRequest = await this.proofService.createProofRequestFromProposal(messageContext.agentContext, proofRequestFromProposalOptions);
        const indyProofRequest = proofRequest.proofFormats;
        if (!indyProofRequest || !indyProofRequest.indy) {
            this.agentConfig.logger.error(`No Indy proof request was found`);
            throw new error_1.AriesFrameworkError('No Indy proof request was found');
        }
        const { message } = await this.proofService.createRequestAsResponse(messageContext.agentContext, {
            proofFormats: {
                indy: {
                    name: (_a = indyProofRequest.indy) === null || _a === void 0 ? void 0 : _a.name,
                    version: (_b = indyProofRequest.indy) === null || _b === void 0 ? void 0 : _b.version,
                    nonRevoked: (_c = indyProofRequest.indy) === null || _c === void 0 ? void 0 : _c.nonRevoked,
                    requestedAttributes: (_d = indyProofRequest.indy) === null || _d === void 0 ? void 0 : _d.requestedAttributes,
                    requestedPredicates: (_e = indyProofRequest.indy) === null || _e === void 0 ? void 0 : _e.requestedPredicates,
                    ver: (_f = indyProofRequest.indy) === null || _f === void 0 ? void 0 : _f.ver,
                    nonce: (_g = indyProofRequest.indy) === null || _g === void 0 ? void 0 : _g.nonce,
                },
            },
            proofRecord: proofRecord,
            autoAcceptProof: proofRecord.autoAcceptProof,
            willConfirm: true,
        });
        return new models_1.OutboundMessageContext(message, {
            agentContext: messageContext.agentContext,
            connection: messageContext.connection,
            associatedRecord: proofRecord,
        });
    }
}
exports.V1ProposePresentationHandler = V1ProposePresentationHandler;
//# sourceMappingURL=V1ProposePresentationHandler.js.map