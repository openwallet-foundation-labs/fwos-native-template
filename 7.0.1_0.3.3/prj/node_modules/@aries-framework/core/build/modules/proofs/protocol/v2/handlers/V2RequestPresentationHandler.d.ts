import type { AgentConfig } from '../../../../../agent/AgentConfig';
import type { MessageHandler, MessageHandlerInboundMessage } from '../../../../../agent/MessageHandler';
import type { DidCommMessageRepository } from '../../../../../storage/didcomm/DidCommMessageRepository';
import type { MediationRecipientService, RoutingService } from '../../../../routing';
import type { ProofResponseCoordinator } from '../../../ProofResponseCoordinator';
import type { ProofFormat } from '../../../formats/ProofFormat';
import type { V2ProofService } from '../V2ProofService';
import { OutboundMessageContext } from '../../../../../agent/models';
import { V2RequestPresentationMessage } from '../messages/V2RequestPresentationMessage';
export declare class V2RequestPresentationHandler<PFs extends ProofFormat[] = ProofFormat[]> implements MessageHandler {
    private proofService;
    private agentConfig;
    private proofResponseCoordinator;
    private mediationRecipientService;
    private didCommMessageRepository;
    private routingService;
    supportedMessages: (typeof V2RequestPresentationMessage)[];
    constructor(proofService: V2ProofService, agentConfig: AgentConfig, proofResponseCoordinator: ProofResponseCoordinator, mediationRecipientService: MediationRecipientService, didCommMessageRepository: DidCommMessageRepository, routingService: RoutingService);
    handle(messageContext: MessageHandlerInboundMessage<V2RequestPresentationHandler>): Promise<OutboundMessageContext<import("../../../../..").AgentMessage> | undefined>;
    private createPresentation;
}
