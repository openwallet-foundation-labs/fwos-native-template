import type { IndyProofFormat, IndyProposeProofFormat } from './IndyProofFormat';
import type { GetRequestedCredentialsFormat } from './IndyProofFormatsServiceOptions';
import type { AgentContext } from '../../../../agent';
import type { CreateRequestAsResponseOptions, FormatRequestedCredentialReturn, FormatRetrievedCredentialOptions } from '../../models/ProofServiceOptions';
import type { ProofRequestFormats } from '../../models/SharedOptions';
import type { ProofAttachmentFormat } from '../models/ProofAttachmentFormat';
import type { CreatePresentationFormatsOptions, FormatCreateProofProposalOptions, CreateRequestOptions, FormatCreatePresentationOptions, ProcessPresentationOptions, ProcessProposalOptions, ProcessRequestOptions, VerifyProofOptions } from '../models/ProofFormatServiceOptions';
import { AgentConfig } from '../../../../agent/AgentConfig';
import { DidCommMessageRepository } from '../../../../storage/didcomm/DidCommMessageRepository';
import { IndyWallet } from '../../../../wallet/IndyWallet';
import { IndyHolderService, IndyVerifierService, IndyRevocationService } from '../../../indy';
import { IndyLedgerService } from '../../../ledger';
import { PresentationPreview } from '../../protocol/v1/models';
import { ProofFormatService } from '../ProofFormatService';
import { ProofRequest } from './models/ProofRequest';
export declare class IndyProofFormatService extends ProofFormatService {
    private indyHolderService;
    private indyVerifierService;
    private indyRevocationService;
    private ledgerService;
    private logger;
    private wallet;
    constructor(agentConfig: AgentConfig, indyHolderService: IndyHolderService, indyVerifierService: IndyVerifierService, indyRevocationService: IndyRevocationService, ledgerService: IndyLedgerService, didCommMessageRepository: DidCommMessageRepository, wallet: IndyWallet);
    readonly formatKey: "indy";
    readonly proofRecordType: "indy";
    private createRequestAttachment;
    private createProofAttachment;
    createProposal(options: FormatCreateProofProposalOptions): Promise<ProofAttachmentFormat>;
    processProposal(options: ProcessProposalOptions): Promise<void>;
    createRequestAsResponse(options: CreateRequestAsResponseOptions<[IndyProofFormat]>): Promise<ProofAttachmentFormat>;
    createRequest(options: CreateRequestOptions): Promise<ProofAttachmentFormat>;
    processRequest(options: ProcessRequestOptions): Promise<void>;
    createPresentation(agentContext: AgentContext, options: FormatCreatePresentationOptions<IndyProofFormat>): Promise<ProofAttachmentFormat>;
    processPresentation(agentContext: AgentContext, options: ProcessPresentationOptions): Promise<boolean>;
    verifyProof(agentContext: AgentContext, options: VerifyProofOptions): Promise<boolean>;
    supportsFormat(formatIdentifier: string): boolean;
    /**
     * Compare presentation attrs with request/proposal attrs (auto-accept)
     *
     * @param proposalAttachments attachment data from the proposal
     * @param requestAttachments  attachment data from the request
     * @returns boolean value
     */
    proposalAndRequestAreEqual(proposalAttachments: ProofAttachmentFormat[], requestAttachments: ProofAttachmentFormat[]): boolean;
    /**
     * Build credential definitions object needed to create and verify proof objects.
     *
     * Creates object with `{ credentialDefinitionId: CredentialDefinition }` mapping
     *
     * @param credentialDefinitionIds List of credential definition ids
     * @returns Object containing credential definitions for specified credential definition ids
     *
     */
    private getCredentialDefinitions;
    getRequestedCredentialsForProofRequest(agentContext: AgentContext, options: GetRequestedCredentialsFormat): Promise<FormatRetrievedCredentialOptions<[IndyProofFormat]>>;
    private getCredentialsForProofRequest;
    autoSelectCredentialsForProofRequest(options: FormatRetrievedCredentialOptions<[IndyProofFormat]>): Promise<FormatRequestedCredentialReturn<[IndyProofFormat]>>;
    /**
     * Build schemas object needed to create and verify proof objects.
     *
     * Creates object with `{ schemaId: Schema }` mapping
     *
     * @param schemaIds List of schema ids
     * @returns Object containing schemas for specified schema ids
     *
     */
    private getSchemas;
    /**
     * Create indy proof from a given proof request and requested credential object.
     *
     * @param proofRequest The proof request to create the proof for
     * @param requestedCredentials The requested credentials object specifying which credentials to use for the proof
     * @returns indy proof object
     */
    private createProof;
    createProofRequestFromProposal(options: CreatePresentationFormatsOptions): Promise<ProofRequestFormats>;
    private getRevocationStatusForRequestedItem;
    createRequestFromPreview(indyFormat: IndyProposeProofFormat): Promise<ProofRequest>;
    createReferentForProofRequest(indyFormat: IndyProposeProofFormat, preview: PresentationPreview): Promise<ProofRequest>;
}
