"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProofService = void 0;
const JsonTransformer_1 = require("../../utils/JsonTransformer");
const ProofEvents_1 = require("./ProofEvents");
class ProofService {
    constructor(agentConfig, proofRepository, connectionService, didCommMessageRepository, wallet, eventEmitter) {
        this.proofRepository = proofRepository;
        this.connectionService = connectionService;
        this.didCommMessageRepository = didCommMessageRepository;
        this.eventEmitter = eventEmitter;
        this.wallet = wallet;
        this.logger = agentConfig.logger;
    }
    emitStateChangedEvent(agentContext, proofRecord, previousState) {
        const clonedProof = JsonTransformer_1.JsonTransformer.clone(proofRecord);
        this.eventEmitter.emit(agentContext, {
            type: ProofEvents_1.ProofEventTypes.ProofStateChanged,
            payload: {
                proofRecord: clonedProof,
                previousState: previousState,
            },
        });
    }
    /**
     * Update the record to a new state and emit an state changed event. Also updates the record
     * in storage.
     *
     * @param proofRecord The proof record to update the state for
     * @param newState The state to update to
     *
     */
    async updateState(agentContext, proofRecord, newState) {
        const previousState = proofRecord.state;
        proofRecord.state = newState;
        await this.proofRepository.update(agentContext, proofRecord);
        this.emitStateChangedEvent(agentContext, proofRecord, previousState);
    }
    update(agentContext, proofRecord) {
        return this.proofRepository.update(agentContext, proofRecord);
    }
    async saveOrUpdatePresentationMessage(agentContext, options) {
        await this.didCommMessageRepository.saveOrUpdateAgentMessage(agentContext, {
            associatedRecordId: options.proofRecord.id,
            agentMessage: options.message,
            role: options.role,
        });
    }
    async delete(agentContext, proofRecord, options) {
        var _a;
        await this.proofRepository.delete(agentContext, proofRecord);
        const deleteAssociatedDidCommMessages = (_a = options === null || options === void 0 ? void 0 : options.deleteAssociatedDidCommMessages) !== null && _a !== void 0 ? _a : true;
        if (deleteAssociatedDidCommMessages) {
            const didCommMessages = await this.didCommMessageRepository.findByQuery(agentContext, {
                associatedRecordId: proofRecord.id,
            });
            for (const didCommMessage of didCommMessages) {
                await this.didCommMessageRepository.delete(agentContext, didCommMessage);
            }
        }
    }
}
exports.ProofService = ProofService;
//# sourceMappingURL=ProofService.js.map