"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2ProposePresentationHandler = void 0;
const models_1 = require("../../../../../agent/models");
const AriesFrameworkError_1 = require("../../../../../error/AriesFrameworkError");
const V2ProposalPresentationMessage_1 = require("../messages/V2ProposalPresentationMessage");
class V2ProposePresentationHandler {
    constructor(proofService, agentConfig, didCommMessageRepository, proofResponseCoordinator) {
        this.supportedMessages = [V2ProposalPresentationMessage_1.V2ProposalPresentationMessage];
        this.proofService = proofService;
        this.agentConfig = agentConfig;
        this.didCommMessageRepository = didCommMessageRepository;
        this.proofResponseCoordinator = proofResponseCoordinator;
    }
    async handle(messageContext) {
        const proofRecord = await this.proofService.processProposal(messageContext);
        const shouldAutoRespond = await this.proofResponseCoordinator.shouldAutoRespondToProposal(messageContext.agentContext, proofRecord);
        if (shouldAutoRespond) {
            return this.createRequest(proofRecord, messageContext);
        }
    }
    async createRequest(proofRecord, messageContext) {
        this.agentConfig.logger.info(`Automatically sending request with autoAccept on ${this.agentConfig.autoAcceptProofs}`);
        if (!messageContext.connection) {
            this.agentConfig.logger.error('No connection on the messageContext');
            throw new AriesFrameworkError_1.AriesFrameworkError('No connection on the messageContext');
        }
        const proposalMessage = await this.didCommMessageRepository.findAgentMessage(messageContext.agentContext, {
            associatedRecordId: proofRecord.id,
            messageClass: V2ProposalPresentationMessage_1.V2ProposalPresentationMessage,
        });
        if (!proposalMessage) {
            this.agentConfig.logger.error(`Proof record with id ${proofRecord.id} is missing required credential proposal`);
            throw new AriesFrameworkError_1.AriesFrameworkError(`Proof record with id ${proofRecord.id} is missing required credential proposal`);
        }
        const proofRequestFromProposalOptions = {
            proofRecord,
        };
        const proofRequest = await this.proofService.createProofRequestFromProposal(messageContext.agentContext, proofRequestFromProposalOptions);
        const indyProofRequest = proofRequest.proofFormats;
        if (!indyProofRequest) {
            this.agentConfig.logger.error('Failed to create proof request');
            throw new AriesFrameworkError_1.AriesFrameworkError('Failed to create proof request.');
        }
        const options = {
            proofRecord: proofRecord,
            autoAcceptProof: proofRecord.autoAcceptProof,
            proofFormats: indyProofRequest,
            willConfirm: true,
        };
        const { message } = await this.proofService.createRequestAsResponse(messageContext.agentContext, options);
        return new models_1.OutboundMessageContext(message, {
            agentContext: messageContext.agentContext,
            connection: messageContext.connection,
            associatedRecord: proofRecord,
        });
    }
}
exports.V2ProposePresentationHandler = V2ProposePresentationHandler;
//# sourceMappingURL=V2ProposePresentationHandler.js.map