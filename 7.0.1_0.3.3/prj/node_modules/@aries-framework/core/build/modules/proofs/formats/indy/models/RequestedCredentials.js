"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestedCredentials = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const JsonTransformer_1 = require("../../../../../utils/JsonTransformer");
const transformers_1 = require("../../../../../utils/transformers");
const RequestedAttribute_1 = require("./RequestedAttribute");
const RequestedPredicate_1 = require("./RequestedPredicate");
/**
 * Requested Credentials for Indy proof creation
 *
 * @see https://github.com/hyperledger/indy-sdk/blob/57dcdae74164d1c7aa06f2cccecaae121cefac25/libindy/src/api/anoncreds.rs#L1433-L1445
 */
class RequestedCredentials {
    constructor(options = {}) {
        var _a, _b, _c;
        if (options) {
            this.requestedAttributes = (_a = options.requestedAttributes) !== null && _a !== void 0 ? _a : {};
            this.requestedPredicates = (_b = options.requestedPredicates) !== null && _b !== void 0 ? _b : {};
            this.selfAttestedAttributes = (_c = options.selfAttestedAttributes) !== null && _c !== void 0 ? _c : {};
        }
    }
    toJSON() {
        // IndyRequestedCredentials is indy-sdk json type
        return JsonTransformer_1.JsonTransformer.toJSON(this);
    }
    getCredentialIdentifiers() {
        const credIds = new Set();
        Object.values(this.requestedAttributes).forEach((attr) => {
            credIds.add(attr.credentialId);
        });
        Object.values(this.requestedPredicates).forEach((pred) => {
            credIds.add(pred.credentialId);
        });
        return Array.from(credIds);
    }
}
__decorate([
    (0, class_transformer_1.Expose)({ name: 'requested_attributes' }),
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, transformers_1.RecordTransformer)(RequestedAttribute_1.RequestedAttribute),
    __metadata("design:type", Object)
], RequestedCredentials.prototype, "requestedAttributes", void 0);
__decorate([
    (0, class_transformer_1.Expose)({ name: 'requested_predicates' }),
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, transformers_1.RecordTransformer)(RequestedPredicate_1.RequestedPredicate),
    __metadata("design:type", Object)
], RequestedCredentials.prototype, "requestedPredicates", void 0);
__decorate([
    (0, class_transformer_1.Expose)({ name: 'self_attested_attributes' }),
    __metadata("design:type", Object)
], RequestedCredentials.prototype, "selfAttestedAttributes", void 0);
exports.RequestedCredentials = RequestedCredentials;
//# sourceMappingURL=RequestedCredentials.js.map