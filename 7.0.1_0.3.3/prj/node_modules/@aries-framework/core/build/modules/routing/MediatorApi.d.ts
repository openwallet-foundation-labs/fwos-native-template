import type { MediationRecord } from './repository';
import type { EncryptedMessage } from '../../types';
import { AgentContext } from '../../agent';
import { Dispatcher } from '../../agent/Dispatcher';
import { EventEmitter } from '../../agent/EventEmitter';
import { MessageSender } from '../../agent/MessageSender';
import { ConnectionService } from '../connections/services';
import { MediatorModuleConfig } from './MediatorModuleConfig';
import { MessagePickupService, V2MessagePickupService } from './protocol';
import { MediatorService } from './services/MediatorService';
export declare class MediatorApi {
    config: MediatorModuleConfig;
    private mediatorService;
    private messagePickupService;
    private messageSender;
    private eventEmitter;
    private agentContext;
    private connectionService;
    constructor(dispatcher: Dispatcher, mediationService: MediatorService, messagePickupService: MessagePickupService, v2MessagePickupService: V2MessagePickupService, messageSender: MessageSender, eventEmitter: EventEmitter, agentContext: AgentContext, connectionService: ConnectionService, config: MediatorModuleConfig);
    initialize(): Promise<void>;
    grantRequestedMediation(mediatorId: string): Promise<MediationRecord>;
    queueMessage(connectionId: string, message: EncryptedMessage): Promise<void>;
    private registerMessageHandlers;
}
