"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagePickupService = void 0;
const Dispatcher_1 = require("../../../../../agent/Dispatcher");
const EventEmitter_1 = require("../../../../../agent/EventEmitter");
const models_1 = require("../../../../../agent/models");
const constants_1 = require("../../../../../constants");
const plugins_1 = require("../../../../../plugins");
const handlers_1 = require("./handlers");
const messages_1 = require("./messages");
let MessagePickupService = class MessagePickupService {
    constructor(messageRepository, dispatcher, eventEmitter) {
        this.messageRepository = messageRepository;
        this.dispatcher = dispatcher;
        this.eventEmitter = eventEmitter;
        this.registerMessageHandlers();
    }
    async batch(messageContext) {
        // Assert ready connection
        const connection = messageContext.assertReadyConnection();
        const { message } = messageContext;
        const messages = await this.messageRepository.takeFromQueue(connection.id, message.batchSize);
        // TODO: each message should be stored with an id. to be able to conform to the id property
        // of batch message
        const batchMessages = messages.map((msg) => new messages_1.BatchMessageMessage({
            message: msg,
        }));
        const batchMessage = new messages_1.BatchMessage({
            messages: batchMessages,
        });
        return new models_1.OutboundMessageContext(batchMessage, { agentContext: messageContext.agentContext, connection });
    }
    async queueMessage(connectionId, message) {
        await this.messageRepository.add(connectionId, message);
    }
    registerMessageHandlers() {
        this.dispatcher.registerMessageHandler(new handlers_1.BatchPickupHandler(this));
        this.dispatcher.registerMessageHandler(new handlers_1.BatchHandler(this.eventEmitter));
    }
};
MessagePickupService = __decorate([
    (0, plugins_1.injectable)(),
    __param(0, (0, plugins_1.inject)(constants_1.InjectionSymbols.MessageRepository)),
    __metadata("design:paramtypes", [Object, Dispatcher_1.Dispatcher,
        EventEmitter_1.EventEmitter])
], MessagePickupService);
exports.MessagePickupService = MessagePickupService;
//# sourceMappingURL=MessagePickupService.js.map