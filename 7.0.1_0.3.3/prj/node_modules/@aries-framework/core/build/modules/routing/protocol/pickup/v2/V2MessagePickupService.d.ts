import type { DeliveryRequestMessage, MessagesReceivedMessage, StatusRequestMessage } from './messages';
import type { InboundMessageContext } from '../../../../../agent/models/InboundMessageContext';
import type { EncryptedMessage } from '../../../../../types';
import { Dispatcher } from '../../../../../agent/Dispatcher';
import { OutboundMessageContext } from '../../../../../agent/models';
import { MessageRepository } from '../../../../../storage/MessageRepository';
import { MediationRecipientService } from '../../../services';
import { MessageDeliveryMessage, StatusMessage } from './messages';
export declare class V2MessagePickupService {
    private messageRepository;
    private dispatcher;
    private mediationRecipientService;
    constructor(messageRepository: MessageRepository, dispatcher: Dispatcher, mediationRecipientService: MediationRecipientService);
    processStatusRequest(messageContext: InboundMessageContext<StatusRequestMessage>): Promise<OutboundMessageContext<StatusMessage>>;
    queueMessage(connectionId: string, message: EncryptedMessage): Promise<void>;
    processDeliveryRequest(messageContext: InboundMessageContext<DeliveryRequestMessage>): Promise<OutboundMessageContext<MessageDeliveryMessage | StatusMessage>>;
    processMessagesReceived(messageContext: InboundMessageContext<MessagesReceivedMessage>): Promise<OutboundMessageContext<StatusMessage>>;
    protected registerMessageHandlers(): void;
}
