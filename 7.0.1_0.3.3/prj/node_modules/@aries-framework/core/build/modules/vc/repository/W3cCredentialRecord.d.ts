import type { TagsBase } from '../../../storage/BaseRecord';
import { BaseRecord } from '../../../storage/BaseRecord';
import { W3cVerifiableCredential } from '../models/credential/W3cVerifiableCredential';
export interface W3cCredentialRecordOptions {
    id?: string;
    createdAt?: Date;
    credential: W3cVerifiableCredential;
    tags: CustomW3cCredentialTags;
}
export type CustomW3cCredentialTags = TagsBase & {
    expandedTypes?: Array<string>;
};
export type DefaultW3cCredentialTags = {
    issuerId: string;
    subjectIds: Array<string>;
    schemaIds: Array<string>;
    contexts: Array<string>;
    proofTypes: Array<string>;
    givenId?: string;
};
export declare class W3cCredentialRecord extends BaseRecord<DefaultW3cCredentialTags, CustomW3cCredentialTags> {
    static readonly type = "W3cCredentialRecord";
    readonly type = "W3cCredentialRecord";
    credential: W3cVerifiableCredential;
    constructor(props: W3cCredentialRecordOptions);
    getTags(): {
        issuerId: string;
        subjectIds: string[];
        schemaIds: string[];
        contexts: string[];
        proofTypes: string[];
        givenId: string | undefined;
        expandedTypes?: string[] | undefined;
    };
}
