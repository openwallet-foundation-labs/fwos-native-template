"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifiableCredentialTransformer = exports.W3cVerifiableCredential = void 0;
const class_transformer_1 = require("class-transformer");
const utils_1 = require("../../../../utils");
const jsonldUtil_1 = require("../../jsonldUtil");
const LinkedDataProof_1 = require("../LinkedDataProof");
const W3cCredential_1 = require("./W3cCredential");
class W3cVerifiableCredential extends W3cCredential_1.W3cCredential {
    constructor(options) {
        super(options);
        if (options) {
            this.proof = Array.isArray(options.proof)
                ? options.proof.map((proof) => new LinkedDataProof_1.LinkedDataProof(proof))
                : new LinkedDataProof_1.LinkedDataProof(options.proof);
        }
    }
    get proofTypes() {
        var _a;
        const proofArray = (0, jsonldUtil_1.orArrayToArray)(this.proof);
        return (_a = proofArray === null || proofArray === void 0 ? void 0 : proofArray.map((x) => x.type)) !== null && _a !== void 0 ? _a : [];
    }
}
__decorate([
    (0, LinkedDataProof_1.LinkedDataProofTransformer)(),
    (0, utils_1.IsInstanceOrArrayOfInstances)({ classType: LinkedDataProof_1.LinkedDataProof }),
    __metadata("design:type", Object)
], W3cVerifiableCredential.prototype, "proof", void 0);
exports.W3cVerifiableCredential = W3cVerifiableCredential;
// Custom transformers
function VerifiableCredentialTransformer() {
    return (0, class_transformer_1.Transform)(({ value, type }) => {
        if (type === class_transformer_1.TransformationType.PLAIN_TO_CLASS) {
            if (Array.isArray(value))
                return value.map((v) => (0, class_transformer_1.plainToInstance)(W3cVerifiableCredential, v));
            return (0, class_transformer_1.plainToInstance)(W3cVerifiableCredential, value);
        }
        else if (type === class_transformer_1.TransformationType.CLASS_TO_PLAIN) {
            if (Array.isArray(value))
                return value.map((v) => (0, class_transformer_1.instanceToPlain)(v));
            return (0, class_transformer_1.instanceToPlain)(value);
        }
        // PLAIN_TO_PLAIN
        return value;
    });
}
exports.VerifiableCredentialTransformer = VerifiableCredentialTransformer;
//# sourceMappingURL=W3cVerifiableCredential.js.map