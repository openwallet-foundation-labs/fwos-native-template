import type { W3cVerifyCredentialResult } from './models';
import type { CreatePresentationOptions, DeriveProofOptions, SignCredentialOptions, SignPresentationOptions, StoreCredentialOptions, VerifyCredentialOptions, VerifyPresentationOptions } from './models/W3cCredentialServiceOptions';
import type { VerifyPresentationResult } from './models/presentation/VerifyPresentationResult';
import type { AgentContext } from '../../agent/context';
import type { Query } from '../../storage/StorageService';
import { SignatureSuiteRegistry } from './SignatureSuiteRegistry';
import { W3cVcModuleConfig } from './W3cVcModuleConfig';
import { W3cVerifiableCredential } from './models';
import { W3cPresentation } from './models/presentation/W3cPresentation';
import { W3cVerifiablePresentation } from './models/presentation/W3cVerifiablePresentation';
import { W3cCredentialRecord, W3cCredentialRepository } from './repository';
export declare class W3cCredentialService {
    private w3cCredentialRepository;
    private signatureSuiteRegistry;
    private w3cVcModuleConfig;
    constructor(w3cCredentialRepository: W3cCredentialRepository, signatureSuiteRegistry: SignatureSuiteRegistry, w3cVcModuleConfig: W3cVcModuleConfig);
    /**
     * Signs a credential
     *
     * @param credential the credential to be signed
     * @returns the signed credential
     */
    signCredential(agentContext: AgentContext, options: SignCredentialOptions): Promise<W3cVerifiableCredential>;
    /**
     * Verifies the signature(s) of a credential
     *
     * @param credential the credential to be verified
     * @returns the verification result
     */
    verifyCredential(agentContext: AgentContext, options: VerifyCredentialOptions): Promise<W3cVerifyCredentialResult>;
    /**
     * Utility method that creates a {@link W3cPresentation} from one or more {@link W3cVerifiableCredential}s.
     *
     * **NOTE: the presentation that is returned is unsigned.**
     *
     * @param credentials One or more instances of {@link W3cVerifiableCredential}
     * @param [id] an optional unique identifier for the presentation
     * @param [holderUrl] an optional identifier identifying the entity that is generating the presentation
     * @returns An instance of {@link W3cPresentation}
     */
    createPresentation(options: CreatePresentationOptions): Promise<W3cPresentation>;
    /**
     * Signs a presentation including the credentials it includes
     *
     * @param presentation the presentation to be signed
     * @returns the signed presentation
     */
    signPresentation(agentContext: AgentContext, options: SignPresentationOptions): Promise<W3cVerifiablePresentation>;
    /**
     * Verifies a presentation including the credentials it includes
     *
     * @param presentation the presentation to be verified
     * @returns the verification result
     */
    verifyPresentation(agentContext: AgentContext, options: VerifyPresentationOptions): Promise<VerifyPresentationResult>;
    deriveProof(agentContext: AgentContext, options: DeriveProofOptions): Promise<W3cVerifiableCredential>;
    private getPublicKeyFromVerificationMethod;
    /**
     * Writes a credential to storage
     *
     * @param record the credential to be stored
     * @returns the credential record that was written to storage
     */
    storeCredential(agentContext: AgentContext, options: StoreCredentialOptions): Promise<W3cCredentialRecord>;
    removeCredentialRecord(agentContext: AgentContext, id: string): Promise<void>;
    getAllCredentialRecords(agentContext: AgentContext): Promise<W3cCredentialRecord[]>;
    getCredentialRecordById(agentContext: AgentContext, id: string): Promise<W3cCredentialRecord>;
    findCredentialRecordsByQuery(agentContext: AgentContext, query: Query<W3cCredentialRecord>): Promise<W3cVerifiableCredential[]>;
    getVerificationMethodTypesByProofType(proofType: string): string[];
    getKeyTypesByProofType(proofType: string): string[];
    findCredentialRecordByQuery(agentContext: AgentContext, query: Query<W3cCredentialRecord>): Promise<W3cVerifiableCredential | undefined>;
    private getSignatureSuitesForCredential;
}
