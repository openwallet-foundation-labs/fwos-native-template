"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsVerifiablePresentationType = exports.W3cPresentation = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const validators_1 = require("../../../../utils/validators");
const constants_1 = require("../../constants");
const validators_2 = require("../../validators");
const W3cVerifiableCredential_1 = require("../credential/W3cVerifiableCredential");
class W3cPresentation {
    constructor(options) {
        if (options) {
            this.id = options.id;
            this.context = options.context;
            this.type = options.type;
            this.verifiableCredential = Array.isArray(options.verifiableCredential)
                ? options.verifiableCredential.map((vc) => new W3cVerifiableCredential_1.W3cVerifiableCredential(vc))
                : new W3cVerifiableCredential_1.W3cVerifiableCredential(options.verifiableCredential);
            this.holder = options.holder;
        }
    }
}
__decorate([
    (0, class_transformer_1.Expose)({ name: '@context' }),
    (0, validators_2.IsJsonLdContext)(),
    __metadata("design:type", Object)
], W3cPresentation.prototype, "context", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, validators_1.IsUri)(),
    __metadata("design:type", String)
], W3cPresentation.prototype, "id", void 0);
__decorate([
    IsVerifiablePresentationType(),
    __metadata("design:type", Array)
], W3cPresentation.prototype, "type", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, validators_1.IsUri)(),
    __metadata("design:type", String)
], W3cPresentation.prototype, "holder", void 0);
__decorate([
    (0, W3cVerifiableCredential_1.VerifiableCredentialTransformer)(),
    (0, validators_1.IsInstanceOrArrayOfInstances)({ classType: W3cVerifiableCredential_1.W3cVerifiableCredential }),
    __metadata("design:type", Object)
], W3cPresentation.prototype, "verifiableCredential", void 0);
exports.W3cPresentation = W3cPresentation;
// Custom validators
function IsVerifiablePresentationType(validationOptions) {
    return (0, class_validator_1.ValidateBy)({
        name: 'IsVerifiablePresentationType',
        validator: {
            validate: (value) => {
                if (Array.isArray(value)) {
                    return value.includes(constants_1.VERIFIABLE_PRESENTATION_TYPE);
                }
                return false;
            },
            defaultMessage: (0, class_validator_1.buildMessage)((eachPrefix) => eachPrefix + '$property must be an array of strings which includes "VerifiablePresentation"', validationOptions),
        },
    }, validationOptions);
}
exports.IsVerifiablePresentationType = IsVerifiablePresentationType;
//# sourceMappingURL=W3cPresentation.js.map