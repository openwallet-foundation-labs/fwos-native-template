import type { AgentContext } from '../../../agent';
import type { Cred, CredDef, CredDefId, CredOffer, CredReq, CredRevocId, CredValues, Schema } from 'indy-sdk';
import { AgentDependencies } from '../../../agent/AgentDependencies';
import { IndyUtilitiesService } from './IndyUtilitiesService';
export declare class IndyIssuerService {
    private indy;
    private indyUtilitiesService;
    constructor(indyUtilitiesService: IndyUtilitiesService, agentDependencies: AgentDependencies);
    /**
     * Create a new credential schema.
     *
     * @returns the schema.
     */
    createSchema(agentContext: AgentContext, { originDid, name, version, attributes }: CreateSchemaOptions): Promise<Schema>;
    /**
     * Create a new credential definition and store it in the wallet.
     *
     * @returns the credential definition.
     */
    createCredentialDefinition(agentContext: AgentContext, { issuerDid, schema, tag, signatureType, supportRevocation, }: CreateCredentialDefinitionOptions): Promise<CredDef>;
    /**
     * Create a credential offer for the given credential definition id.
     *
     * @param credentialDefinitionId The credential definition to create an offer for
     * @returns The created credential offer
     */
    createCredentialOffer(agentContext: AgentContext, credentialDefinitionId: CredDefId): Promise<CredOffer>;
    /**
     * Create a credential.
     *
     * @returns Credential and revocation id
     */
    createCredential(agentContext: AgentContext, { credentialOffer, credentialRequest, credentialValues, revocationRegistryId, tailsFilePath, }: CreateCredentialOptions): Promise<[Cred, CredRevocId]>;
}
export interface CreateCredentialDefinitionOptions {
    issuerDid: string;
    schema: Schema;
    tag?: string;
    signatureType?: 'CL';
    supportRevocation?: boolean;
}
export interface CreateCredentialOptions {
    credentialOffer: CredOffer;
    credentialRequest: CredReq;
    credentialValues: CredValues;
    revocationRegistryId?: string;
    tailsFilePath?: string;
}
export interface CreateSchemaOptions {
    originDid: string;
    name: string;
    version: string;
    attributes: string[];
}
