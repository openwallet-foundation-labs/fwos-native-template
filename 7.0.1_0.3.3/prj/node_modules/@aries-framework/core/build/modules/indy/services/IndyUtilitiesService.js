"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndyUtilitiesService = void 0;
const constants_1 = require("../../../constants");
const error_1 = require("../../../error");
const IndySdkError_1 = require("../../../error/IndySdkError");
const plugins_1 = require("../../../plugins");
const indyError_1 = require("../../../utils/indyError");
const path_1 = require("../../../utils/path");
let IndyUtilitiesService = class IndyUtilitiesService {
    constructor(logger, fileSystem, agentDependencies) {
        this.indy = agentDependencies.indy;
        this.logger = logger;
        this.fileSystem = fileSystem;
    }
    /**
     * Get a handler for the blob storage tails file reader.
     *
     * @param tailsFilePath The path of the tails file
     * @returns The blob storage reader handle
     */
    async createTailsReader(tailsFilePath) {
        try {
            this.logger.debug(`Opening tails reader at path ${tailsFilePath}`);
            const tailsFileExists = await this.fileSystem.exists(tailsFilePath);
            // Extract directory from path (should also work with windows paths)
            const dirname = (0, path_1.getDirFromFilePath)(tailsFilePath);
            if (!tailsFileExists) {
                throw new error_1.AriesFrameworkError(`Tails file does not exist at path ${tailsFilePath}`);
            }
            const tailsReaderConfig = {
                base_dir: dirname,
            };
            const tailsReader = await this.indy.openBlobStorageReader('default', tailsReaderConfig);
            this.logger.debug(`Opened tails reader at path ${tailsFilePath}`);
            return tailsReader;
        }
        catch (error) {
            if ((0, indyError_1.isIndyError)(error)) {
                throw new IndySdkError_1.IndySdkError(error);
            }
            throw error;
        }
    }
    async downloadTails(hash, tailsLocation) {
        try {
            this.logger.debug(`Checking to see if tails file for URL ${tailsLocation} has been stored in the FileSystem`);
            const filePath = `${this.fileSystem.basePath}/afj/tails/${hash}`;
            const tailsExists = await this.fileSystem.exists(filePath);
            this.logger.debug(`Tails file for ${tailsLocation} ${tailsExists ? 'is stored' : 'is not stored'} at ${filePath}`);
            if (!tailsExists) {
                this.logger.debug(`Retrieving tails file from URL ${tailsLocation}`);
                await this.fileSystem.downloadToFile(tailsLocation, filePath);
                this.logger.debug(`Saved tails file to FileSystem at path ${filePath}`);
                //TODO: Validate Tails File Hash
            }
            this.logger.debug(`Tails file for URL ${tailsLocation} is stored in the FileSystem, opening tails reader`);
            return this.createTailsReader(filePath);
        }
        catch (error) {
            this.logger.error(`Error while retrieving tails file from URL ${tailsLocation}`, {
                error,
            });
            throw (0, indyError_1.isIndyError)(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
};
IndyUtilitiesService = __decorate([
    (0, plugins_1.injectable)(),
    __param(0, (0, plugins_1.inject)(constants_1.InjectionSymbols.Logger)),
    __param(1, (0, plugins_1.inject)(constants_1.InjectionSymbols.FileSystem)),
    __param(2, (0, plugins_1.inject)(constants_1.InjectionSymbols.AgentDependencies)),
    __metadata("design:paramtypes", [Object, Object, Object])
], IndyUtilitiesService);
exports.IndyUtilitiesService = IndyUtilitiesService;
//# sourceMappingURL=IndyUtilitiesService.js.map