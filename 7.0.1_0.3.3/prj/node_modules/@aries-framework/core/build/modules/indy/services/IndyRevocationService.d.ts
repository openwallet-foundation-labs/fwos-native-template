import type { AgentContext } from '../../../agent';
import type { IndyRevocationInterval } from '../../credentials';
import type { RequestedCredentials } from '../../proofs/formats/indy/models/RequestedCredentials';
import type { default as Indy } from 'indy-sdk';
import { AgentDependencies } from '../../../agent/AgentDependencies';
import { Logger } from '../../../logger';
import { IndyLedgerService } from '../../ledger';
import { IndyUtilitiesService } from './IndyUtilitiesService';
export declare class IndyRevocationService {
    private indy;
    private indyUtilitiesService;
    private ledgerService;
    private logger;
    constructor(indyUtilitiesService: IndyUtilitiesService, ledgerService: IndyLedgerService, agentDependencies: AgentDependencies, logger: Logger);
    createRevocationState(agentContext: AgentContext, proofRequest: Indy.IndyProofRequest, requestedCredentials: RequestedCredentials): Promise<Indy.RevStates>;
    getRevocationStatus(agentContext: AgentContext, credentialRevocationId: string, revocationRegistryDefinitionId: string, requestRevocationInterval: IndyRevocationInterval): Promise<{
        revoked: boolean;
        deltaTimestamp: number;
    }>;
    private assertRevocationInterval;
}
