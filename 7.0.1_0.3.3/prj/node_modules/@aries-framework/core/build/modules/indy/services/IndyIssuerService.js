"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndyIssuerService = void 0;
const constants_1 = require("../../../constants");
const AriesFrameworkError_1 = require("../../../error/AriesFrameworkError");
const IndySdkError_1 = require("../../../error/IndySdkError");
const plugins_1 = require("../../../plugins");
const indyError_1 = require("../../../utils/indyError");
const assertIndyWallet_1 = require("../../../wallet/util/assertIndyWallet");
const IndyUtilitiesService_1 = require("./IndyUtilitiesService");
let IndyIssuerService = class IndyIssuerService {
    constructor(indyUtilitiesService, agentDependencies) {
        this.indy = agentDependencies.indy;
        this.indyUtilitiesService = indyUtilitiesService;
    }
    /**
     * Create a new credential schema.
     *
     * @returns the schema.
     */
    async createSchema(agentContext, { originDid, name, version, attributes }) {
        (0, assertIndyWallet_1.assertIndyWallet)(agentContext.wallet);
        try {
            const [, schema] = await this.indy.issuerCreateSchema(originDid, name, version, attributes);
            return schema;
        }
        catch (error) {
            throw (0, indyError_1.isIndyError)(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    /**
     * Create a new credential definition and store it in the wallet.
     *
     * @returns the credential definition.
     */
    async createCredentialDefinition(agentContext, { issuerDid, schema, tag = 'default', signatureType = 'CL', supportRevocation = false, }) {
        (0, assertIndyWallet_1.assertIndyWallet)(agentContext.wallet);
        try {
            const [, credentialDefinition] = await this.indy.issuerCreateAndStoreCredentialDef(agentContext.wallet.handle, issuerDid, schema, tag, signatureType, {
                support_revocation: supportRevocation,
            });
            return credentialDefinition;
        }
        catch (error) {
            throw (0, indyError_1.isIndyError)(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    /**
     * Create a credential offer for the given credential definition id.
     *
     * @param credentialDefinitionId The credential definition to create an offer for
     * @returns The created credential offer
     */
    async createCredentialOffer(agentContext, credentialDefinitionId) {
        (0, assertIndyWallet_1.assertIndyWallet)(agentContext.wallet);
        try {
            return await this.indy.issuerCreateCredentialOffer(agentContext.wallet.handle, credentialDefinitionId);
        }
        catch (error) {
            throw (0, indyError_1.isIndyError)(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
    /**
     * Create a credential.
     *
     * @returns Credential and revocation id
     */
    async createCredential(agentContext, { credentialOffer, credentialRequest, credentialValues, revocationRegistryId, tailsFilePath, }) {
        (0, assertIndyWallet_1.assertIndyWallet)(agentContext.wallet);
        try {
            // Indy SDK requires tailsReaderHandle. Use null if no tailsFilePath is present
            const tailsReaderHandle = tailsFilePath ? await this.indyUtilitiesService.createTailsReader(tailsFilePath) : 0;
            if (revocationRegistryId || tailsFilePath) {
                throw new AriesFrameworkError_1.AriesFrameworkError('Revocation not supported yet');
            }
            const [credential, credentialRevocationId] = await this.indy.issuerCreateCredential(agentContext.wallet.handle, credentialOffer, credentialRequest, credentialValues, revocationRegistryId !== null && revocationRegistryId !== void 0 ? revocationRegistryId : null, tailsReaderHandle);
            return [credential, credentialRevocationId];
        }
        catch (error) {
            throw (0, indyError_1.isIndyError)(error) ? new IndySdkError_1.IndySdkError(error) : error;
        }
    }
};
IndyIssuerService = __decorate([
    (0, plugins_1.injectable)(),
    __param(1, (0, plugins_1.inject)(constants_1.InjectionSymbols.AgentDependencies)),
    __metadata("design:paramtypes", [IndyUtilitiesService_1.IndyUtilitiesService, Object])
], IndyIssuerService);
exports.IndyIssuerService = IndyIssuerService;
//# sourceMappingURL=IndyIssuerService.js.map