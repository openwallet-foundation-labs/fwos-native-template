"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndyVerifierService = void 0;
const constants_1 = require("../../../constants");
const error_1 = require("../../../error");
const plugins_1 = require("../../../plugins");
const indyError_1 = require("../../../utils/indyError");
const IndyLedgerService_1 = require("../../ledger/services/IndyLedgerService");
let IndyVerifierService = class IndyVerifierService {
    constructor(ledgerService, agentDependencies) {
        this.indy = agentDependencies.indy;
        this.ledgerService = ledgerService;
    }
    async verifyProof(agentContext, { proofRequest, proof, schemas, credentialDefinitions }) {
        try {
            const { revocationRegistryDefinitions, revocationRegistries } = await this.getRevocationRegistries(agentContext, proof);
            return await this.indy.verifierVerifyProof(proofRequest, proof, schemas, credentialDefinitions, revocationRegistryDefinitions, revocationRegistries);
        }
        catch (error) {
            throw (0, indyError_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
    async getRevocationRegistries(agentContext, proof) {
        var _a;
        const revocationRegistryDefinitions = {};
        const revocationRegistries = Object.create(null);
        for (const identifier of proof.identifiers) {
            const revocationRegistryId = identifier.rev_reg_id;
            const timestamp = identifier.timestamp;
            //Fetch Revocation Registry Definition if not already fetched
            if (revocationRegistryId && !revocationRegistryDefinitions[revocationRegistryId]) {
                const { revocationRegistryDefinition } = await this.ledgerService.getRevocationRegistryDefinition(agentContext, revocationRegistryId);
                revocationRegistryDefinitions[revocationRegistryId] = revocationRegistryDefinition;
            }
            //Fetch Revocation Registry by Timestamp if not already fetched
            if (revocationRegistryId && timestamp && !((_a = revocationRegistries[revocationRegistryId]) === null || _a === void 0 ? void 0 : _a[timestamp])) {
                if (!revocationRegistries[revocationRegistryId]) {
                    revocationRegistries[revocationRegistryId] = Object.create(null);
                }
                const { revocationRegistry } = await this.ledgerService.getRevocationRegistry(agentContext, revocationRegistryId, timestamp);
                revocationRegistries[revocationRegistryId][timestamp] = revocationRegistry;
            }
        }
        return { revocationRegistryDefinitions, revocationRegistries };
    }
};
IndyVerifierService = __decorate([
    (0, plugins_1.injectable)(),
    __param(1, (0, plugins_1.inject)(constants_1.InjectionSymbols.AgentDependencies)),
    __metadata("design:paramtypes", [IndyLedgerService_1.IndyLedgerService, Object])
], IndyVerifierService);
exports.IndyVerifierService = IndyVerifierService;
//# sourceMappingURL=IndyVerifierService.js.map